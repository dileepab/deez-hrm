{"version":3,"sources":["helpers/auth-header.js","helpers/handle-response.js","helpers/history.js","constants.js","services/authentication.service.js","services/operator.service.js","services/design.service.js","services/operation.service.js","components/GarmentSawing/Operator/AddOperator.js","components/GarmentSawing/Operator/EditOperator.js","img/deez-logo.png","services/settings.service.js","components/GarmentSawing/Operator/ViewOperator.js","components/GarmentSawing/Design/AddDesign.js","components/GarmentSawing/Design/EditDesign.js","components/GarmentSawing/Design/ViewDesign.js","components/GarmentSawing/Operation/AddOperation.js","components/GarmentSawing/Operation/ViewOperation.js","components/GarmentSawing/Operator/OperatorOperations.js","components/SignIn/SignIn.js","helpers/PrivateRote.js","App.js","store/actions/counter.js","store/reducers/counter.js","store/reducers/index.js","reportWebVitals.js","index.js"],"names":["authHeader","currentUser","authenticationService","currentUserValue","token","handleResponse","response","text","then","data","JSON","parse","ok","indexOf","status","logout","error","message","statusText","toast","notify","Promise","reject","history","createBrowserHistory","apiUrl","currentUserSubject","BehaviorSubject","localStorage","getItem","login","email","password","requestOptions","method","headers","body","stringify","fetch","user","loadUserData","setItem","next","replace","removeItem","asObservable","value","operatorService","getOperatorWithOperations","today","Date","startMonth","setMonth","getMonth","startDate","getFullYear","console","log","toUTCString","getOperators","getMachineOperatorsAndHelpers","addOperator","editOperator","id","updateOperatorSteps","deleteOperator","fetchDesigns","addOperatorOperations","designService","getAllDesigns","type","getLastTwoMonthsAllDesigns","getAllDesignsWithOperator","getAllIncompleteDesignsWithOperator","getIncompleteDesignsWithOperations","addDesign","deleteDesign","editDesign","operationService","addOperations","updateOperations","addAllOperations","AddOperator","props","notifyError","notifySuccess","msg","success","handleSubmit","event","currentTarget","checkValidity","setState","validated","isLoading","trackPromise","state","form","name","fullName","team","isQC","nationalId","bankAccount","bank","distance","preventDefault","stopPropagation","handleInputChange","target","checked","resignDate","isResigned","bind","Container","Form","noValidate","this","onSubmit","Group","as","Row","className","Label","column","sm","Col","Control","onChange","required","defaultValue","Check","label","Button","disabled","variant","React","Component","EditOperator","ind","selectedOperator","lodash","cloneDeep","operators","modal","showEditModal","title","removeOperator","showConfirmation","confirmEdit","Object","fromEntries","entries","filter","handleClose","confirmDelete","splice","showSuccess","handleDateChange","subscribe","x","Table","striped","bordered","hover","size","width","map","operator","onClick","icon","faEdit","Modal","show","onHide","centered","Header","closeButton","Title","Body","Footer","settingsService","getAll","updateAll","ViewOperator","formattedData","calculateTimeToComplete","designs","fetchOperators","fetchSettings","settings","date","thisMonthStartDate","lastMonthStartDate","thisMonthCompletedCount","lastMonthCompletedCount","createBrandObject","selectedDesign","i","operationTimes","thisMonthCompletedTime","lastMonthCompletedTime","steps","operation","estimatedTime","brand","operatorSteps","operatorStep","completeTime","quantity","brands","forEach","item","totalTime","sewingValueForSecond","sewingValue","obj","getDate","yesterday","moment","add","tomorrow","setDate","subtract","endOf","helpersCount","cutterCount","todayTimeAndSalary","calculateSalary","todaySalary","totalSalary","todayTime","todayCompleteCount","totalCompleteCount","yesterdayTimeAndSalary","yesterdaySalary","yesterdayTime","yesterdayCompleteCount","yesterdayCLCompleteCount","yesterdayNLMCompleteCount","yesterdayMBCompleteCount","thisMonthTimeAndSalary","thisMonthTime","thisMonthSalary","thisMonthCompleteCount","thisMonthCLCompleteCount","thisMonthNLMCompleteCount","thisMonthMBCompleteCount","lastMonthTimeAndSalary","lastMonthTime","lastMonthSalary","lastMonthCompleteCount","lastMonthCLCompleteCount","lastMonthNLMCompleteCount","lastMonthMBCompleteCount","thisMonthWRKDays","calculateWorkDays","lastMonthWRKDays","extraPayments","percentage","calculatePercentage","todayPercentage","Math","round","totalTodayTime","thisMonthPercentage","totalThisMonthTime","lastMonthPercentage","totalLastMonthTime","calculateBonus","addOperatorInfo","orderBy","viewSalarySheetModal","prevState","showSalaryModal","showInfoModal","sortOperator","updateOperatorStep","key","updatedQuantity","editable","view","operatorType","days","qcPrice","perKMPrice","maxTransportAmount","isTransportEnable","bestOperatorThisMonth","bestOperatorLastMonth","lastMonthBonus","thisMonthBonus","performancePlaceLastMonth","ordinal_suffix_of","j","k","floor","salary","toFixed","start","end","monthOperatorSteps","push","monthWRKDays","groupBy","b","format","keys","length","design","find","step","designId","alert","salaryFormatter","duration","parseInt","transport","extraPaymentTotal","extraPayment","val","qcSalary","calculateExtraPayments","calculateTransport","index","includes","slice","reverse","window","print","ButtonGroup","faPrint","months","timeFormatter","viewOperatorInfo","faInfo","day","calculateDaily","scrollable","Accordion","defaultActiveKey","Item","eventKey","isLast","description","e","faUpload","borderless","colSpan","alt","src","logo","calculateTotalSalary","style","op","payment","AddDesign","getSawingValueDefault","handleDesignTypeChange","handleBrandChange","startTime","isComplete","controlId","EditDesign","editComplete","ViewDesign","removeDesign","duplicateDesign","_","showDuplicateModal","confirmDesignDuplicate","duplicateOperations","viewDesignInfo","calculateTotalTimeToComplete","calculateCompletedTime","totalCompletedTime","totalTimeToComplete","time","operationCompletedCount","completedCount","showOperationInfoModal","filterData","keyword","toLowerCase","filteredData","filteredDesign","viewOperationInfo","selectedOperation","prevProps","snapshot","faCopy","roles","faTrash","md","AddOperation","handleAddOperation","values","unshift","handleRemoveOperation","isInDb","handleUpdateOperation","isChange","handleCreateOperation","handleDesignChange","operations","handleTimer","timerModal","selectedOperationIndex","userTimer","createRef","undefined","inputField","xs","faClock","faPlus","ref","initialTime","startImmediately","resume","pause","stop","reset","Fragment","Minutes","Seconds","current","getTime","ViewOperation","OperatorOperations","completedTime","completedQuantity","operatorId","stepId","position","minHeight","SignIn","useState","setEmail","setPassword","navigate","useNavigate","height","placeholder","PrivateRoute","children","to","configure","autoClose","App","onLogOut","allowedRole","Navbar","bg","sticky","expand","collapseOnSelect","fluid","Brand","Toggle","Collapse","Nav","NavDropdown","Link","username","path","element","INCREMENT","DECREMENT","initialState","count","combineReducers","counter","action","payload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","applyMiddleware","thunk","logger","LoadingIndicator","usePromiseTracker","promiseInProgress","display","justifyContent","alignItems","top","left","background","zIndex","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe288735.chunk.js","sourcesContent":["import { authenticationService } from '../services';\n\nexport function authHeader() {\n    // return authorization header with jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.token) {\n        return {\n            'Authorization': `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n        };\n    } else {\n        return {\n            'Content-Type': 'application/json',\n        };\n    }\n}","import { authenticationService } from '../services';\nimport {toast} from \"react-toastify\";\n\nexport function handleResponse(response) {\n\n    const notify = (error) => toast.error(error);\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if ([401, 403].indexOf(response.status) !== -1) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                authenticationService.logout();\n            }\n\n            const error = (data && data.error && data.error.message) || response.statusText;\n            notify(error);\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export const apiUrl = 'http://deez.lk/api';\n// export const apiUrl = 'http://localhost:5000/api';\n// export const apiUrl = '/api';\n","import { BehaviorSubject } from 'rxjs';\n\nimport {handleResponse, history} from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue () { return currentUserSubject.value }\n};\n\nfunction login(email, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password })\n    };\n\n    return fetch(`${apiUrl}/users/login`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            return loadUserData(user.token).then( user => {\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                currentUserSubject.next(user);\n                return user;\n                }\n            );\n        });\n}\n\nfunction loadUserData(token) {\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n    };\n\n    return fetch(`${apiUrl}/whoAmI`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            user = {...user, token};\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    history.replace('/sign-in');\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const operatorService = {\n    getOperatorWithOperations,\n    getOperators,\n    getMachineOperatorsAndHelpers,\n    addOperator,\n    editOperator,\n    updateOperatorSteps,\n    deleteOperator,\n    fetchDesigns,\n    addOperatorOperations,\n};\n\nfunction getOperatorWithOperations() {\n    let today = new Date();\n    let startMonth = new Date(today);\n    startMonth.setMonth(startMonth.getMonth() - 1);\n    let startDate = new Date(startMonth.getFullYear(), startMonth.getMonth(), 1);\n    console.log(startDate.toUTCString());\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/operators?filter=\n  {\n    \"where\":{\"isResigned\": false},\n    \"include\": [\n      {\n        \"relation\": \"operatorSteps\",\n        \"scope\": {\n          \"where\": {\n            \"completeTime\": {\n              \"gte\": [\n                \"${startDate.toUTCString()}\"\n              ]\n            }\n          },\n          \"order\": [\n            \"id desc\"\n          ],\n          \"fields\": {\n            \"id\": \"true\",\n            \"stepId\": \"true\",\n            \"operatorId\": \"true\",\n            \"completeTime\": \"true\",\n            \"quantity\": \"true\"\n          },\n          \"include\": [\n            {\n              \"relation\": \"step\",\n              \"scope\": {\n                \"fields\": {\n                  \"id\": \"true\",\n                  \"name\": \"true\",\n                  \"estimatedTime\": \"true\",\n                  \"designId\": \"true\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }`,\n        requestOptions).then(handleResponse);\n}\n\nfunction getOperators() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/operators`,\n        requestOptions).then(handleResponse);\n}\n\nfunction getMachineOperatorsAndHelpers() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/operators?filter={\"where\":{\"isResigned\": false, \"type\": {\"nin\": [\"3\",\"4\",\"5\"]}}}`,\n        requestOptions).then(handleResponse);\n}\n\nfunction addOperator(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operators`, requestOptions).then(handleResponse);\n}\n\nfunction editOperator(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operators/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction updateOperatorSteps(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operator-steps/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction deleteOperator(id) {\n    const requestOptions = { method: 'DELETE', headers: authHeader() };\n    return fetch(`${apiUrl}/operators/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction fetchDesigns() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\"}]}`, requestOptions).then(handleResponse);\n}\n\nfunction addOperatorOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/operator-steps`, requestOptions).then(handleResponse);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const designService = {\n    getAllDesigns,\n    getLastTwoMonthsAllDesigns,\n    getAllDesignsWithOperator,\n    getAllIncompleteDesignsWithOperator,\n    getIncompleteDesignsWithOperations,\n    addDesign,\n    deleteDesign,\n    editDesign,\n};\n\nfunction getAllDesigns(type) {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={${type === 'incomplete'? '\"where\":{\"isComplete\": false},' : type === 'complete'? '\"where\":{\"isComplete\": true},' : '' }\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"order\": [\"id desc\"], \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getLastTwoMonthsAllDesigns() {\n    let today = new Date();\n    let startMonth = new Date(today);\n    startMonth.setMonth(startMonth.getMonth() - 3);\n    let startDate = new Date(startMonth.getFullYear(), startMonth.getMonth(), 1);\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\n          \"where\": {\n            \"startTime\": {\n              \"gte\": [\n                \"${startDate.toUTCString()}\"\n              ]\n            }\n          },\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\",\n        \"scope\": {\n          \"fields\": {\n            \"id\": \"true\",\n            \"estimatedTime\": \"true\",\n            \"designId\": \"true\"\n          },\n          \"include\": [{\"relation\": \"operatorSteps\", \"order\": [\"id desc\"]}]\n        }}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getAllDesignsWithOperator() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getAllIncompleteDesignsWithOperator() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getIncompleteDesignsWithOperations() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\"}]}`, requestOptions).then(handleResponse);\n}\n\nfunction addDesign(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/designs`, requestOptions).then(handleResponse);\n}\n\nfunction deleteDesign(id) {\n    const requestOptions = { method: 'DELETE', headers: authHeader() };\n    return fetch(`${apiUrl}/designs/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction editDesign(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/designs/${id}`, requestOptions).then(handleResponse);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const operationService = {\n    addOperations,\n    updateOperations,\n    addAllOperations,\n};\n\nfunction addOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps`, requestOptions).then(handleResponse);\n}\n\nfunction updateOperations(id, data) {\n    const requestOptions = { method: 'PUT', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction addAllOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps-multi`, requestOptions).then(handleResponse);\n}","import React from \"react\";\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {operatorService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddOperator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                fullName: '',\n                team: '1',\n                type: '1',\n                isQC: false,\n                nationalId: '',\n                bankAccount: '',\n                bank: '',\n                distance: '',\n                startDate: new Date(),\n                resignDate: new Date(),\n                isResigned: false,\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n                operatorService.addOperator(this.state.form).then(\n                    data => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: '',\n                                fullName: '',\n                                team: '1',\n                                type: '1',\n                                isQC: false,\n                                nationalId: '',\n                                bankAccount: '',\n                                bank: '',\n                                distance: '',\n                            }\n                        });\n                        this.notifySuccess(`Operator \"${data.name}\" added successfully`);\n\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h2>Add Operator</h2>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} className=\"mb-3\" id=\"name\">\n                        <Form.Label column sm=\"4\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"fullName\">\n                        <Form.Label column sm=\"4\">\n                            Full Name (with initials)\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'fullName'} value={this.state.form.fullName}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"team\">\n                        <Form.Label column sm=\"4\">\n                            Team\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control name={'team'} as=\"select\" defaultValue={this.state.form.team}\n                                          onChange={this.handleInputChange}>\n                                <option value={'1'}>1</option>\n                                <option value={'2'}>2</option>\n                                <option value={'3'}>3</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"type\">\n                        <Form.Label column sm=\"4\">Select Operator Type</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control as=\"select\" name={'type'} defaultValue={this.state.form.type}\n                                          onChange={this.handleInputChange}>\n                                <option value=\"1\">Machine Operator</option>\n                                <option value=\"2\">Helper</option>\n                                <option value=\"3\">Cutting</option>\n                                <option value=\"4\">QC</option>\n                                <option value=\"5\">Manager</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    {this.state.form.type === '2' &&\n                    <Form.Group as={Row} id=\"type\">\n                        <Form.Label column sm=\"4\">Is QC?</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Check name={'isQC'} type=\"checkbox\" label=\"\"\n                                        checked={this.state.form.isQC} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n                    }\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"nationalId\">\n                        <Form.Label column sm=\"4\">National Id</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'nationalId'} value={this.state.form.nationalId}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"bank\">\n                        <Form.Label column sm=\"4\">Bank Name</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'bank'} value={this.state.form.bank}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"bankAccount\">\n                        <Form.Label column sm=\"4\">Bank Account Number</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'bankAccount'} value={this.state.form.bankAccount}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"distance\">\n                        <Form.Label column sm=\"4\">Distance (KM)</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'distance'} value={this.state.form.distance}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Button type=\"submit\" className=\"mt-3\" disabled={this.state.isLoading}\n                            variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Add Operator'}</Button>\n                </Form>\n\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEdit, faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport lodash from \"lodash\"\nimport {authenticationService, operatorService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport DatePicker from 'react-date-picker';\n\n\nexport default class EditOperator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            operators: [],\n            modal: {\n                showConfirmation: false,\n                showSuccess: false,\n                showEditModal: false,\n                title: '',\n                body: ''\n            },\n            selectedOperator: {},\n            isLoading: false\n        };\n    }\n\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    componentDidMount() {\n\n        authenticationService.currentUser.subscribe(x => this.setState({\n            currentUser: x,\n        }));\n        trackPromise(\n            operatorService.getOperators()\n                .then(\n                    data => {\n                        const operators = data || [];\n                        this.setState({\n                            // this.setState({\n                            operators: operators\n                        });\n                    },\n                    error => {\n                        this.setState({msg: error});\n                        console.error('Error:', error);\n                    }\n                ));\n    }\n\n    editOperator = (id, ind) => {\n        let selectedOperator = lodash.cloneDeep(this.state.operators[ind]);\n        selectedOperator.ind = ind;\n        this.setState({\n            selectedOperator: selectedOperator,\n            modal: {\n                ...this.state.modal,\n                showEditModal: true,\n                title: `Edit Operator ${selectedOperator.name}`\n            }\n        })\n    }\n\n    removeOperator = (id, ind) => {\n        let selectedOperator = this.state.operators[ind];\n        this.setState({\n            selectedOperator: selectedOperator,\n            modal: {\n                ...this.state.modal,\n                showConfirmation: true,\n                title: `Remove Operator ${selectedOperator.name}`,\n                body: 'Are you sure ?'\n            }\n        })\n    }\n\n    confirmEdit = () => {\n        this.setState({isLoading: true});\n        let data = lodash.cloneDeep(Object.fromEntries(Object.entries(this.state.selectedOperator).filter(([_, v]) => v != null)));\n        delete data.ind;\n        trackPromise(\n            operatorService.editOperator(this.state.selectedOperator.id, data)\n                .then(\n                    data => {\n                        let operators = this.state.operators;\n                        let ind = this.state.selectedOperator.ind;\n                        console.log('here', ind);\n                        operators[ind] = this.state.selectedOperator;\n                        this.setState({\n                            operators: operators,\n                            isLoading: false,\n                        });\n                        this.handleClose();\n                        this.notifySuccess(`${this.state.selectedOperator.name} successfully edited`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    confirmDelete = () => {\n        this.setState({isLoading: true});\n        trackPromise(\n            operatorService.deleteOperator(this.state.selectedOperator.id)\n                .then(\n                    () => {\n                        let operators = this.state.operators;\n                        let ind = operators.indexOf(this.state.selectedOperator);\n                        operators.splice(ind, 1);\n                        this.setState({\n                            operators: operators,\n                            isLoading: false,\n                        });\n                        this.handleClose();\n                        this.notifySuccess(`${this.state.selectedOperator.name} successfully deleted`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showConfirmation: false,\n                showSuccess: false,\n                showEditModal: false,\n            }\n        });\n    }\n\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            selectedOperator: {\n                ...this.state.selectedOperator,\n                [name]: value\n            }\n        });\n    }\n\n    handleDateChange = (event) => {\n        const name = 'resignDate';\n\n        this.setState({\n            selectedOperator: {\n                ...this.state.selectedOperator,\n                [name]: event\n            }\n        });\n    }\n\n\n    render() {\n        return (\n            <Container>\n                <br/>\n                <h2>Edit Operators</h2>\n                <br/>\n                <Row>\n                    <Table striped bordered hover size=\"sm\">\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Team</th>\n                            <th width={90}></th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.operators && this.state.operators.map((operator, ind) => {\n                            return (\n                                <tr key={ind}>\n                                    <td>{operator.name}</td>\n                                    <td>{operator.team}</td>\n                                    <td className={'text-center'}>\n                                        <Button variant={\"outline-primary\"}\n                                                onClick={() => this.editOperator(operator.id, ind)}\n                                                size={\"sm\"}>\n                                            <FontAwesomeIcon icon={faEdit}/>\n                                        </Button>\n                                        &nbsp;\n\n                                        {/*{this.state.currentUser && this.state.currentUser.roles.includes('admin') &&*/}\n                                        {/*<Button variant={\"danger\"} onClick={() => this.removeOperator(operator.id, ind)}*/}\n                                        {/*        size={\"sm\"}>*/}\n                                        {/*    <FontAwesomeIcon icon={faTrash}/>*/}\n                                        {/*</Button>*/}\n                                        {/*}*/}\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Modal show={this.state.modal.showEditModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <Form noValidate validated={this.state.validated}>\n                                <Form.Group as={Row} className=\"mb-3\" id=\"name\">\n                                    <Form.Label column sm=\"4\">\n                                        Name\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'name'}\n                                                      defaultValue={this.state.selectedOperator.name}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"fullName\">\n                                    <Form.Label column sm=\"4\">\n                                        Full Name (with initials)\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'fullName'} value={this.state.selectedOperator.fullName}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"team\">\n                                    <Form.Label column sm=\"4\">\n                                        Team\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control name={'team'} as=\"select\"\n                                                      defaultValue={this.state.selectedOperator.team}\n                                                      onChange={this.handleInputChange}>\n                                            <option value={'1'}>1</option>\n                                            <option value={'2'}>2</option>\n                                            <option value={'3'}>3</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"type\">\n                                    <Form.Label column sm=\"4\">Select Operator Type</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control as=\"select\" name={'type'}\n                                                      defaultValue={this.state.selectedOperator.type}\n                                                      onChange={this.handleInputChange}>\n                                            <option value=\"1\">Machine Operator</option>\n                                            <option value=\"2\">Helper</option>\n                                            <option value=\"3\">Cutting</option>\n                                            <option value=\"4\">QC</option>\n                                            <option value=\"5\">Manager</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                {this.state.selectedOperator.type === '2' &&\n                                <Form.Group as={Row} className=\"mb-3\" id=\"isQC\">\n                                    <Form.Label column sm=\"4\">Is QC?</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Check name={'isQC'} type=\"checkbox\" label=\"\"\n                                                    checked={this.state.selectedOperator.isQC}\n                                                    onChange={this.handleInputChange}/>\n                                    </Col>\n                                </Form.Group>\n                                }\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"nationalId\">\n                                    <Form.Label column sm=\"4\">National Id</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'nationalId'} value={this.state.selectedOperator.nationalId}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"bank\">\n                                    <Form.Label column sm=\"4\">Bank Name</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'bank'} value={this.state.selectedOperator.bank}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"bankAccount\">\n                                    <Form.Label column sm=\"4\">Bank Account Number</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'bankAccount'} value={this.state.selectedOperator.bankAccount}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"distance\">\n                                    <Form.Label column sm=\"4\">Distance (KM)</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"number\" name={'distance'} value={this.state.selectedOperator.distance}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"isResigned\">\n                                    <Form.Label column sm=\"4\">Is Resigned?</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Check name={'isResigned'} type=\"checkbox\" label=\"\"\n                                                    checked={this.state.selectedOperator.isResigned}\n                                                    onChange={this.handleInputChange}/>\n                                    </Col>\n                                </Form.Group>\n\n                                {this.state.selectedOperator.isResigned &&\n                                <Form.Group as={Row} className=\"mb-3\" id=\"resignDate\">\n                                    <Form.Label column sm=\"4\">Resigned Date</Form.Label>\n                                    <Col sm=\"8\">\n                                        <DatePicker name={'resignDate'} onChange={this.handleDateChange} value={this.state.selectedOperator.resignDate} />\n                                    </Col>\n                                </Form.Group>\n                                }\n\n                            </Form>\n                        </Container>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmEdit}>\n                            {this.state.isLoading ? 'Loading' : 'Edit'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showConfirmation} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmDelete}>\n                            {this.state.isLoading ? 'Loading' : 'Confirm'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/deez-logo.de9bcd45.png\";","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const settingsService = {\n    getAll,\n    updateAll\n};\n\nfunction getAll() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/settings`, requestOptions).then(handleResponse);\n}\n\nfunction updateAll(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/settings/${id}`, requestOptions).then(handleResponse);\n}","import React from 'react';\nimport {Accordion, Button, ButtonGroup, Container, Modal, Row, Table} from 'react-bootstrap';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEdit, faInfo, faPrint, faUpload} from '@fortawesome/free-solid-svg-icons';\nimport lodash from 'lodash';\nimport {designService, operatorService} from '../../../services';\nimport {trackPromise} from 'react-promise-tracker';\nimport logo from '../../../img/deez-logo.png';\nimport {settingsService} from '../../../services/settings.service';\n\nexport default class ViewOperator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      operators: [],\n      helpersCount: 0,\n      cutterCount: 0,\n      designs: [],\n      view: 'monthly',\n      operatorType: 'operator',\n      days: [],\n      selectedOperator: {},\n      thisMonthCompletedCount: {},\n      lastMonthCompletedCount: {},\n      modal: {\n        showInfoModal: false,\n        showSalaryModal: false,\n      },\n      settings: {\n        qcPrice: 0,\n        perKMPrice: 0,\n        maxTransportAmount: 0,\n        isTransportEnable: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchDesigns();\n    this.fetchSettings();\n  }\n\n  fetchDesigns = () => {\n    trackPromise(\n      designService.getLastTwoMonthsAllDesigns().then(\n        data => {\n          let formattedData = this.calculateTimeToComplete(data);\n          this.setState({\n            designs: formattedData,\n          });\n          this.fetchOperators();\n        },\n        error => {\n          this.setState({msg: error});\n          console.error('Error:', error);\n        },\n      ));\n  };\n\n  fetchSettings = () => {\n    trackPromise(\n      settingsService.getAll().then(\n        data => {\n          this.setState({\n            settings: data[0],\n          });\n        },\n        error => {\n          this.setState({msg: error});\n          console.error('Error:', error);\n        },\n      ));\n  };\n\n  calculateTimeToComplete = (data) => {\n    let date = new Date();\n    let thisMonthStartDate = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0);\n    let lastMonthStartDate = new Date(date.getFullYear(), date.getMonth() - 1, 1, 0, 0, 0);\n    let thisMonthCompletedCount = {};\n    let lastMonthCompletedCount = {};\n    this.createBrandObject(thisMonthCompletedCount);\n    this.createBrandObject(lastMonthCompletedCount);\n    data.map((selectedDesign, i) => {\n      let operationTimes = {};\n      let thisMonthCompletedTime = {};\n      let lastMonthCompletedTime = {};\n      this.createBrandObject(operationTimes);\n      this.createBrandObject(thisMonthCompletedTime);\n      this.createBrandObject(lastMonthCompletedTime);\n      selectedDesign.steps && selectedDesign.steps.map((operation, ind) => {\n        operationTimes['total'] += operation.estimatedTime;\n        operationTimes[selectedDesign.brand] += operation.estimatedTime;\n        if (selectedDesign.type === 2) {\n          return false;\n        }\n        operation.operatorSteps && operation.operatorSteps.map((operatorStep, ind) => {\n          if (new Date(operatorStep.completeTime) > new Date(thisMonthStartDate)) {\n            thisMonthCompletedTime['total'] += operation.estimatedTime * operatorStep.quantity;\n            thisMonthCompletedTime[selectedDesign.brand] += operation.estimatedTime * operatorStep.quantity;\n          } else if (new Date(operatorStep.completeTime) > new Date(lastMonthStartDate)) {\n            lastMonthCompletedTime['total'] += operation.estimatedTime * operatorStep.quantity;\n            lastMonthCompletedTime[selectedDesign.brand] += operation.estimatedTime * operatorStep.quantity;\n          }\n          return operatorStep;\n        });\n        return operationTimes;\n      });\n      //this month\n      thisMonthCompletedCount['total'] += thisMonthCompletedTime['total'] / operationTimes['total'] || 0;\n      lastMonthCompletedCount['total'] += lastMonthCompletedTime['total'] / operationTimes['total'] || 0;\n      this.state.settings.brands.forEach((item)=>{\n        thisMonthCompletedCount[item] += thisMonthCompletedTime[item] / operationTimes[item] || 0;\n        lastMonthCompletedCount[item] += lastMonthCompletedTime[item] / operationTimes[item] || 0;\n      })\n\n      selectedDesign.totalTime = operationTimes['total'];\n      selectedDesign.sewingValueForSecond = (selectedDesign.sewingValue ? selectedDesign.sewingValue : 0) / operationTimes['total'];\n      return selectedDesign;\n    });\n    console.log(thisMonthCompletedCount, lastMonthCompletedCount);\n    this.setState({\n      thisMonthCompletedCount: thisMonthCompletedCount,\n      lastMonthCompletedCount: lastMonthCompletedCount,\n    });\n    return data;\n  };\n\n  createBrandObject = (obj) => {\n    obj['total'] = 0;\n    this.state.settings.brands.forEach((item)=>{\n      obj[item] = 0;\n    })\n  }\n\n  fetchOperators = () => {\n    trackPromise(\n      operatorService.getOperatorWithOperations()\n        .then(\n          data => {\n            let date = new Date();\n            let today = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n            let yesterday = moment(today).add(-1, 'days');\n            let tomorrow = new Date(date.setDate(today.getDate() + 1));\n            let thisMonthStartDate = moment(new Date()).subtract(1, 'months').endOf('month');\n            let lastMonthStartDate = moment(new Date()).subtract(2, 'months').endOf('month');\n            let helpersCount = 0;\n            let cutterCount = 0;\n            data.map((operator, ind) => {\n              if(operator.type === \"2\"){\n                helpersCount++;\n              }\n              if(operator.type === \"3\"){\n                cutterCount++;\n              }\n              let todayTimeAndSalary = this.calculateSalary(operator, today, tomorrow);\n              operator.todaySalary = todayTimeAndSalary.totalSalary;\n              operator.todayTime = todayTimeAndSalary.totalTime;\n              operator.todayCompleteCount = todayTimeAndSalary.totalCompleteCount['total'];\n\n              let yesterdayTimeAndSalary = this.calculateSalary(operator, yesterday, today);\n              operator.yesterdaySalary = yesterdayTimeAndSalary.totalSalary;\n              operator.yesterdayTime = yesterdayTimeAndSalary.totalTime;\n              operator.yesterdayCompleteCount = yesterdayTimeAndSalary.totalCompleteCount['total'];\n              operator.yesterdayCLCompleteCount = yesterdayTimeAndSalary.totalCompleteCount['cleopatra'];\n              operator.yesterdayNLMCompleteCount = yesterdayTimeAndSalary.totalCompleteCount['nolimit'];\n              operator.yesterdayMBCompleteCount = yesterdayTimeAndSalary.totalCompleteCount['modabella'];\n\n              let thisMonthTimeAndSalary = this.calculateSalary(operator, thisMonthStartDate, tomorrow);\n              operator.thisMonthTime = thisMonthTimeAndSalary.totalTime;\n              operator.thisMonthSalary = thisMonthTimeAndSalary.totalSalary;\n              operator.thisMonthCompleteCount = thisMonthTimeAndSalary.totalCompleteCount['total'];\n              operator.thisMonthCLCompleteCount = thisMonthTimeAndSalary.totalCompleteCount['cleopatra'];\n              operator.thisMonthNLMCompleteCount = thisMonthTimeAndSalary.totalCompleteCount['nolimit'];\n              operator.thisMonthMBCompleteCount = thisMonthTimeAndSalary.totalCompleteCount['modabella'];\n\n              let lastMonthTimeAndSalary = this.calculateSalary(operator, lastMonthStartDate, thisMonthStartDate);\n              operator.lastMonthTime = lastMonthTimeAndSalary.totalTime;\n              operator.lastMonthSalary = lastMonthTimeAndSalary.totalSalary;\n              operator.lastMonthCompleteCount = lastMonthTimeAndSalary.totalCompleteCount['total'];\n              operator.lastMonthCLCompleteCount = lastMonthTimeAndSalary.totalCompleteCount['cleopatra'];\n              operator.lastMonthNLMCompleteCount = lastMonthTimeAndSalary.totalCompleteCount['nolimit'];\n              operator.lastMonthMBCompleteCount = lastMonthTimeAndSalary.totalCompleteCount['modabella'];\n\n              operator.thisMonthWRKDays = this.calculateWorkDays(operator, thisMonthStartDate, tomorrow);\n              operator.lastMonthWRKDays = this.calculateWorkDays(operator, lastMonthStartDate, thisMonthStartDate);\n              operator.extraPayments = [];\n              return operator;\n            });\n            const percentage = this.calculatePercentage(data);\n            data.map((operator, ind) => {\n              operator.todayPercentage = operator.todayTime === 0 ? 0 : Math.round((operator.todayTime / percentage.totalTodayTime) * 10000) / 100;\n              operator.thisMonthPercentage = operator.thisMonthTime === 0 ? 0 : Math.round((operator.thisMonthTime / percentage.totalThisMonthTime) * 10000) / 100;\n              operator.lastMonthPercentage = operator.lastMonthTime === 0 ? 0 : Math.round((operator.lastMonthTime / percentage.totalLastMonthTime) * 10000) / 100;\n              return operator;\n            });\n            this.calculateBonus(data);\n            this.addOperatorInfo(data);\n            data = lodash.orderBy(data, ['todayTime', 'yesterdayTime'], ['desc', 'desc']);\n            this.setState({\n              operators: data,\n              helpersCount: helpersCount,\n              cutterCount: cutterCount\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  };\n\n  calculateBonus(data) {\n    let bestOperatorThisMonth = lodash.orderBy(data, ['thisMonthTime'], ['desc']);\n    let bestOperatorLastMonth = lodash.orderBy(data, ['lastMonthTime'], ['desc']);\n    bestOperatorThisMonth.map((operator, ind) => {\n      if (operator.type !== '1') {\n        operator.lastMonthBonus = 0;\n        return false;\n      }\n      if (ind === 0) {\n        operator.thisMonthBonus = 3000;\n      } else if (ind === 1) {\n        operator.thisMonthBonus = 2000;\n      } else if (ind === 2) {\n        operator.thisMonthBonus = 1000;\n      } else if (ind === 3) {\n        operator.thisMonthBonus = 500;\n      } else {\n        operator.thisMonthBonus = 0;\n      }\n      return operator;\n    });\n    bestOperatorLastMonth.map((operator, ind) => {\n      if (operator.type !== '1') {\n        operator.lastMonthBonus = 0;\n        return false;\n      }\n      if (ind === 0) {\n        operator.lastMonthBonus = 3000;\n      } else if (ind === 1) {\n        operator.lastMonthBonus = 2000;\n      } else if (ind === 2) {\n        operator.lastMonthBonus = 1000;\n      } else if (ind === 3) {\n        operator.lastMonthBonus = 500;\n      } else {\n        operator.lastMonthBonus = 0;\n      }\n      operator.performancePlaceLastMonth = this.ordinal_suffix_of(ind + 1);\n      return operator;\n    });\n  }\n\n  ordinal_suffix_of(i) {\n    let j = i % 10,\n      k = i % 100;\n    if (j === 1 && k !== 11) {\n      return i + 'st';\n    }\n    if (j === 2 && k !== 12) {\n      return i + 'nd';\n    }\n    if (j === 3 && k !== 13) {\n      return i + 'rd';\n    }\n    return i + 'th';\n  }\n\n  calculatePercentage(data) {\n    let totalLastMonthTime = 0;\n    let totalThisMonthTime = 0;\n    let totalTodayTime = 0;\n    data && data.map((operator, ind) => {\n      if (operator.type !== '1') {\n        return false;\n      }\n      totalLastMonthTime += operator.lastMonthTime;\n      totalThisMonthTime += operator.thisMonthTime;\n      totalTodayTime += operator.todayTime;\n      return operator;\n    });\n    return {totalLastMonthTime, totalThisMonthTime, totalTodayTime};\n  }\n\n  timeFormatter(totalTime) {\n    // return moment.duration(totalTime, 'seconds').format(\"d [d] hh [h] mm [min]\")\n    return (Math.floor(totalTime / 60 / 60 / 8) > 0 ? Math.floor(totalTime / 60 / 60 / 8) + ' days  ' : '') +\n      (Math.floor(totalTime / 60 / 60 % 8) > 0 ? Math.floor(totalTime / 60 / 60 % 8) + ' hrs  ' : '') +\n      (Math.floor(totalTime / 60 % 60) > 0 ? Math.floor(totalTime / 60 % 60) + ' mins  ' : '') +\n      totalTime % 60 + ' secs';\n  }\n\n  salaryFormatter(salary) {\n    return (\n      <span className={'salary-format'}>Rs. <span>{salary ? salary.toFixed(2) : 0}</span></span>\n    );\n  }\n\n  calculateWorkDays(operator, start, end) {\n    let monthOperatorSteps = [];\n    operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n      if (new Date(start) > new Date(operatorStep.completeTime) || new Date(operatorStep.completeTime) > new Date(end)) {\n        return operatorStep;\n      }\n      return monthOperatorSteps.push(operatorStep);\n    });\n    let monthWRKDays = lodash.groupBy(monthOperatorSteps, function(b) {\n      return moment(b.completeTime).format('YYYY-MM-DD');\n    });\n    return Object.keys(monthWRKDays).length;\n  }\n\n  calculateSalary(operator, start, end) {\n    let totalTime = 0;\n    let totalCompleteCount = {};\n    this.createBrandObject(totalCompleteCount)\n    // let totalCLCompleteCount = 0;\n    // let totalNLMCompleteCount = 0;\n    // let totalMBCompleteCount = 0;\n    let totalSalary = 0;\n    operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n      if (new Date(start) > new Date(operatorStep.completeTime) || new Date(operatorStep.completeTime) > new Date(end)) {\n        return totalTime;\n      }\n      let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n      if (!design) {\n        alert('Design with id - ' + operatorStep.step.designId + ' not found');\n      }\n      totalTime += operatorStep.step.estimatedTime * operatorStep.quantity;\n      totalCompleteCount['total'] += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      totalCompleteCount[design.brand] += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n\n      totalSalary += operatorStep.step.estimatedTime * operatorStep.quantity * design.sewingValueForSecond;\n      return operatorStep;\n    });\n    return {totalTime, totalSalary, totalCompleteCount};\n  }\n\n  calculateDaily(operatorSteps) {\n\n    let totalTime = 0;\n    let totalCompleteCount = 0;\n    let totalSalary = 0;\n    operatorSteps && operatorSteps.map((operatorStep, ind) => {\n      let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n      totalTime += operatorStep.step.estimatedTime * operatorStep.quantity;\n      totalCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      totalSalary += operatorStep.step.estimatedTime * operatorStep.quantity * design.sewingValueForSecond;\n      return operatorStep;\n    });\n    return `${this.salaryFormatter(totalSalary)} - ${moment.duration(totalTime, 'seconds').format('hh [hr] mm [min]')} ~ ${parseInt(totalCompleteCount)} Dresses`;\n  }\n\n  calculateTransport(operator) {\n    let transport = 0;\n    transport = operator.distance * operator.lastMonthWRKDays * this.state.settings.perKMPrice * 2;\n    return this.state.settings.maxTransportAmount > transport ? transport : this.state.settings.maxTransportAmount;\n  }\n\n  calculateExtraPayments(operator) {\n    let extraPaymentTotal = 0;\n    operator.extraPayments.map((extraPayment) => {\n      return extraPaymentTotal += extraPayment.val;\n    });\n    return extraPaymentTotal;\n  }\n\n  calculateTotalSalary(operator) {\n    let totalSalary = 0;\n    if(operator.type === \"1\" || operator.type === \"2\"){\n      totalSalary += operator.lastMonthSalary + operator.lastMonthBonus;\n    }\n    if(operator.type === \"3\"){\n      totalSalary = (this.state.lastMonthCompletedCount['nolimit'] * 20 + this.state.lastMonthCompletedCount['cleopatra'] * 50 + this.state.lastMonthCompletedCount['modabella'] * 100) / this.state.cutterCount;\n    }\n    if(operator.type === \"4\"){\n      totalSalary = this.state.settings.qcSalary;\n    }\n    if(operator.type === \"5\"){\n      totalSalary = this.state.lastMonthCompletedCount['total'] * 25;\n    }\n    totalSalary += this.calculateExtraPayments(operator)\n    if (this.state.settings.isTransportEnable) {\n      totalSalary += this.calculateTransport(operator);\n    }\n    return this.salaryFormatter(totalSalary);\n  }\n\n  addOperatorInfo(operators) {\n\n    let days = [];\n    operators.map((operator, i) => {\n      operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n        operatorStep.date = moment(operatorStep.completeTime).format('MMM DD YYYY');\n        return operatorStep;\n      });\n      operator.operatorSteps = lodash.groupBy(operator.operatorSteps, 'date');\n      Object.keys(operator.operatorSteps).map((key, index) => {\n        if (!days.includes(key) && index < 5) {\n          days.push(key);\n        }\n        return operator;\n      });\n      return operators;\n    });\n    days = days.slice(0, 5);\n    this.setState({\n      days: days.reverse(),\n    });\n  }\n\n  viewOperatorInfo(operator) {\n\n    this.setState({\n      modal: {\n        showInfoModal: true,\n      },\n      selectedOperator: operator,\n    });\n  }\n\n  viewSalarySheetModal = () => {\n    this.setState(prevState => ({\n      modal: {\n        ...prevState.modal,\n        showSalaryModal: true,\n      },\n    }));\n  };\n\n  handleClose = () => {\n    this.setState({\n      modal: {\n        ...this.state.modal,\n        showInfoModal: false,\n        showSalaryModal: false,\n      },\n    });\n  };\n\n  print() {\n    this.handleClose();\n    window.print();\n  }\n\n  sortOperator = (type) => {\n    if (type === 'today') {\n      let operators = lodash.orderBy(this.state.operators, ['todaySalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'yesterday') {\n      let operators = lodash.orderBy(this.state.operators, ['yesterdaySalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'thisMonth') {\n      let operators = lodash.orderBy(this.state.operators, ['thisMonthSalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'lastMonth') {\n      let operators = lodash.orderBy(this.state.operators, ['lastMonthSalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n  };\n\n  updateOperatorStep = (operatorStep, key, ind) => {\n    trackPromise(\n      operatorService.updateOperatorSteps(operatorStep.id, {'quantity': operatorStep.updatedQuantity})\n        .then(\n          data => {\n            this.fetchOperators();\n            operatorStep.editable = false;\n            operatorStep.quantity = operatorStep.updatedQuantity;\n            let operator = this.state.selectedOperator;\n            operator.operatorSteps[key][ind] = operatorStep;\n            this.setState({\n              operator,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  };\n\n  render() {\n    const date = new Date();\n    return (\n      <Container className={'non-printable'}>\n        <br />\n        <div className='d-flex flex-row justify-content-between mt-2 mb-2'>\n          <div>\n            <ButtonGroup size='sm'>\n              <Button variant={this.state.operatorType === 'operator' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({operatorType: 'operator'})}>Machine Operator</Button>\n              <Button variant={this.state.operatorType === 'helper' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({operatorType: 'helper'})}>Helper</Button>\n            </ButtonGroup>\n\n            {this.state.operatorType === 'operator' &&\n            <h2 className={'mt-2'}>View Operators</h2>\n            }\n            {this.state.operatorType === 'helper' &&\n            <h2 className={'mt-2'}>View Helpers</h2>\n            }\n          </div>\n          <div>\n            <div className={'flex-column'}>\n              <div className={'d-flex flex-row'}>\n                <div>\n                  <div className={'justify-content-end'}>This Month Completed Count</div>\n                  <div className={'justify-content-end'}>Cleopatra</div>\n                  <div className={'justify-content-end'}>Modabella</div>\n                  <div className={'justify-content-end'}>Nolimit</div>\n                </div>\n                <div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.thisMonthCompletedCount['total'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.thisMonthCompletedCount['cleopatra'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.thisMonthCompletedCount['modabella'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.thisMonthCompletedCount['nolimit'])}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <div className={'flex-column'}>\n              <div className={'d-flex flex-row'}>\n                <div>\n                  <div className={'justify-content-end'}>Last Month Completed Count</div>\n                  <div className={'justify-content-end'}>Cleopatra</div>\n                  <div className={'justify-content-end'}>Modabella</div>\n                  <div className={'justify-content-end'}>Nolimit</div>\n                </div>\n                <div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.lastMonthCompletedCount['total'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.lastMonthCompletedCount['cleopatra'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.lastMonthCompletedCount['modabella'])}</div>\n                  <div className={'justify-content-start'}> : {parseInt(this.state.lastMonthCompletedCount['nolimit'])}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={'d-flex flex-column'}>\n            <Button variant={'primary'} onClick={this.viewSalarySheetModal}><FontAwesomeIcon\n              icon={faPrint} /> Print Salary Sheet</Button>\n\n            {this.state.operatorType === 'operator' &&\n            <ButtonGroup className={'mt-3'} size='sm'>\n              <Button variant={this.state.view === 'monthly' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({view: 'monthly'})}>Monthly</Button>\n              <Button variant={this.state.view === 'daily' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({view: 'daily'})}>Daily</Button>\n            </ButtonGroup>\n            }\n          </div>\n        </div>\n        {this.state.operatorType === 'operator' &&\n        <div>\n          <Row>\n            {this.state.view === 'monthly' &&\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                <th className={'d-none d-md-table-cell'}>Team</th>\n                <th className={'cursor-pointer d-none d-md-table-cell'}\n                    onClick={() => this.sortOperator('lastMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('thisMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('yesterday')}>\n                  Yesterday\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('today')}>\n                  Today\n                </th>\n                <th width={40}></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type !== '1') {\n                  return false;\n                }\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    <td className={'d-none d-md-table-cell'}>{operator.team}</td>\n                    <td className={'d-none d-md-table-cell'}>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.lastMonthSalary)}</strong> + <small\n                        className={'text-success'}>{this.salaryFormatter(operator.lastMonthBonus)}</small>\n                      </div>\n                      <div>\n                        <small>{this.timeFormatter(operator.lastMonthTime)}</small> ~ <small>{parseInt(operator.lastMonthCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.thisMonthSalary)}</strong> + <small\n                        className={'text-muted'}>{this.salaryFormatter(operator.thisMonthBonus)}</small>\n                      </div>\n                      <div>\n                        <small>{this.timeFormatter(operator.thisMonthTime)}</small> ~ <small>{parseInt(operator.thisMonthCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div><strong>{this.salaryFormatter(operator.yesterdaySalary)}</strong></div>\n                      <div>\n                        <small>{this.timeFormatter(operator.yesterdayTime)}</small> ~ <small>{parseInt(operator.yesterdayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div><strong>{this.salaryFormatter(operator.todaySalary)}</strong></div>\n                      <div>\n                        <small>{this.timeFormatter(operator.todayTime)}</small> ~ <small>{parseInt(operator.todayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n            }\n            {this.state.view === 'daily' &&\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                {this.state.days.map((day, ind) => {\n                  return (\n                    <th key={ind}>{this.state.days[ind]}</th>\n                  );\n                })}\n                <th></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type !== '1') {\n                  return false;\n                }\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    {this.state.days.map((day, ind) => {\n                      return (\n                        <td key={ind}>{this.calculateDaily(operator.operatorSteps[day])}</td>\n                      );\n                    })}\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n            }\n          </Row>\n        </div>\n        }\n        {this.state.operatorType === 'helper' &&\n        <div>\n          <Row>\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                <th className={'cursor-pointer d-none d-md-table-cell'}\n                    onClick={() => this.sortOperator('lastMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('thisMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('yesterday')}>\n                  Yesterday\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('today')}>\n                  Today\n                </th>\n                <th width={40}></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type === '1') {\n                  return false;\n                }\n                let isQC = operator.type === '4';\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    <td className={'d-none d-md-table-cell'}>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.lastMonthSalary + (isQC ? this.state.lastMonthCompletedCount['total'] * 10 : 0))} </strong>\n                        <br />\n                        ~ <small>{parseInt(operator.lastMonthCompleteCount)} Helper\n                        Dresses </small>\n                        {isQC &&\n                        <small> & {this.state.lastMonthCompletedCount['totlal']} Checked Dresses</small>\n                        }\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.thisMonthSalary + (isQC ? this.state.thisMonthCompletedCount * 10 : 0))} </strong>\n                        <br />\n                        ~ <small>{parseInt(operator.thisMonthCompleteCount)} Helper\n                        Dresses</small>\n                        {isQC &&\n                        <small> & {this.state.thisMonthCompletedCount} Checked Dresses</small>\n                        }\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.yesterdaySalary)} </strong>\n                        ~ <small>{parseInt(operator.yesterdayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.todaySalary)} </strong>\n                        ~ <small>{parseInt(operator.todayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n          </Row>\n        </div>\n        }\n\n        {/*operator info modal*/}\n        <Modal scrollable show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n\n          <Modal.Header closeButton>\n            <Modal.Title>{this.state.selectedOperator.name}'s Activities</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Table striped bordered hover size='sm'>\n              <tbody>\n              <tr>\n                <td>Today Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.todayPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.todaySalary)}</td>\n              </tr>\n              <tr>\n                <td>This Month Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.thisMonthPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.thisMonthSalary)}</td>\n              </tr>\n              <tr>\n                <td>Last Month Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.lastMonthPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.lastMonthSalary)}</td>\n              </tr>\n              </tbody>\n            </Table>\n            <Accordion defaultActiveKey='0' className={'w-100'}>\n              {this.state.selectedOperator.operatorSteps && Object.keys(this.state.selectedOperator.operatorSteps).map((key) => {\n                return (\n                  <Accordion.Item key={key} eventKey={key}>\n                    <Accordion.Header className={'pl-1'}>\n                      <h6 className={'d-flex justify-content-between m-0'}>\n                        <span>{key}</span>\n                        <span>{this.calculateDaily(this.state.selectedOperator.operatorSteps[key])}</span>\n                      </h6>\n                    </Accordion.Header>\n                    <Accordion.Body className={'p-0'}>\n\n                      <Table striped bordered hover size='sm'\n                             className={'m-0'}>\n                        <tbody>\n                        {this.state.selectedOperator.operatorSteps[key].map((operatorStep, ind) => {\n                          let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n                          let isLast = this.state.selectedOperator.operatorSteps[key].length - 1 === ind;\n                          return (\n                            <tr key={ind}>\n                              <td\n                                className={`ps-4 border-left-0 ${isLast ? 'border-bottom-0' : ''}`}>{design.name}-{design.description}-{operatorStep.step.name}</td>\n                              <td className={isLast ? 'border-bottom-0' : ''}>\n                                {!operatorStep.editable &&\n                                <span>{operatorStep.quantity}</span>}\n                                {operatorStep.editable &&\n                                <div className={'d-flex'}>\n                                  <input name='quantity' type='number'\n                                         className='form-control'\n                                         defaultValue={operatorStep.quantity}\n                                         onChange={(e) => {\n                                           operatorStep.updatedQuantity = parseInt(e.target.value);\n                                           let operator = this.state.selectedOperator;\n                                           operator.operatorSteps[key][ind] = operatorStep;\n                                           this.setState({\n                                             operator,\n                                           });\n                                         }}\n                                  />\n                                  <Button variant={'primary'}\n                                          onClick={() => {\n                                            this.updateOperatorStep(operatorStep, key, ind);\n                                          }}\n                                          size={'sm'}>\n                                    <FontAwesomeIcon icon={faUpload} />\n                                  </Button>\n                                </div>\n                                }\n                              </td>\n                              <td\n                                className={isLast ? 'border-bottom-0' : ''}>{moment.duration(operatorStep.step.estimatedTime * operatorStep.quantity, 'seconds').format('d [d] hh [h] mm [min]')}</td>\n                              <td className={`text-center border-right-0 ${isLast ? 'border-bottom-0' : ''}`}>\n                                <Button variant={'outline-primary'} className='mr-1'\n                                        onClick={() => {\n                                          operatorStep.editable = !operatorStep.editable;\n                                          operatorStep.updatedQuantity = operatorStep.quantity;\n                                          let operator = this.state.selectedOperator;\n                                          operator.operatorSteps[key][ind] = operatorStep;\n                                          this.setState({\n                                            operator,\n                                          });\n                                        }}\n                                        size={'sm'}>\n                                  <FontAwesomeIcon icon={faEdit} />\n                                </Button>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                        </tbody>\n                      </Table>\n                    </Accordion.Body>\n                  </Accordion.Item>\n                );\n              })}\n            </Accordion>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button disabled={this.state.isLoading} variant='secondary' onClick={this.handleClose}>\n              Ok\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        {/*Salary modal*/}\n        <Modal scrollable show={this.state.modal.showSalaryModal} onHide={this.handleClose} centered>\n\n          <Modal.Header closeButton>\n            <Modal.Title>Salary Sheets</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className='printable'>\n            <Container>\n              <Row>\n                {this.state.operators && this.state.operators.map((operator, ind) => {\n                  if (operator.lastMonthTime === 0 && operator.type === '1') {\n                    return false;\n                  } else {\n                    return (\n                      <div key={ind} className={'salary-table w-50 mb-5'}>\n                        <Table borderless>\n                          <colgroup>\n                            <col />\n                            <col />\n                            <col />\n                          </colgroup>\n                          <tbody>\n                          <tr>\n                            <td colSpan={3} className={'text-center'}>\n                              <div className={'flex-column align-items-center'}>\n                                <div><img alt={'logo'} className={'logo-salary-print'}\n                                          src={logo} /></div>\n                                <br />\n                                <div><small>Garment</small></div>\n                                <div><small>Temple Road, Bingiriya</small></div>\n                              </div>\n                            </td>\n                          </tr>\n                          <tr className={'border-top'}>\n                            <td colSpan={3} className={'text-center'}>\n                              {operator.fullName || operator.name} - <small>\n                              <Moment format={'MMMM YYYY'} subtract={{months: 1}}>\n                                {date}\n                              </Moment>\n                            </small>\n                            </td>\n                          </tr>\n\n                          {operator.type === '1' &&\n                          <>\n                            <tr className={'border-top'}>\n                              <td>Working Hours</td>\n                              <td className={'text-right'}>\n                                <small>{this.timeFormatter(operator.lastMonthTime)}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Completed Dresses</td>\n                              <td className={'text-right'}>\n                                <small>{parseInt(operator.lastMonthCompleteCount)}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Salary</td>\n                              <td></td>\n                              <td>{this.salaryFormatter(operator.lastMonthSalary)}</td>\n                            </tr>\n                            <tr>\n                              <td>Operator Of Month</td>\n                              <td className={'text-right'}>\n                                <small>{operator.performancePlaceLastMonth}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Operator Of Month Bonus</td>\n                              <td></td>\n                              <td className={'text-right'}>{this.salaryFormatter(operator.lastMonthBonus)}</td>\n                            </tr>\n                          </>\n                          }\n                          {operator.type === '2' &&\n                            <>\n                              <tr className={'border-top'}>\n                                <td>Completed Dresses (Nolimit)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthNLMCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses (Cleopatra)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthCLCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses (Moda Bella)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthMBCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses Total</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Salary (Helper)</td>\n                                <td></td>\n                                <td className={'text-right'}>{this.salaryFormatter(operator.lastMonthSalary)}</td>\n                              </tr>\n                            </>\n                          }\n                          {operator.type === '3' &&\n                            <>\n                              <tr className={'border-top'}>\n                                <td>Number of cut garments (NOLIMIT)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(this.state.lastMonthCompletedCount['nolimit']) /this.state.cutterCount}</small>\n                                </td>\n                                <td/>\n                              </tr>\n                              <tr>\n                                <td/>\n                                <td/>\n                                <td>{this.salaryFormatter(parseInt(this.state.lastMonthCompletedCount['nolimit']) /this.state.cutterCount * 20)}</td>\n                              </tr>\n                              <tr>\n                                <td>Number of cut garments (CLEOPATRA)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(this.state.lastMonthCompletedCount['cleopatra']) /this.state.cutterCount}</small>\n                                </td>\n                                <td/>\n                              </tr>\n                              <tr>\n                                <td/>\n                                <td/>\n                                <td>{this.salaryFormatter(parseInt(this.state.lastMonthCompletedCount['cleopatra']) /this.state.cutterCount * 50)}</td>\n                              </tr>\n                              <tr>\n                                <td>Number of cut garments (MODABELLA)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(this.state.lastMonthCompletedCount['modabella']) /this.state.cutterCount}</small>\n                                </td>\n                                <td/>\n                              </tr>\n                              <tr>\n                                <td/>\n                                <td/>\n                                <td>{this.salaryFormatter(parseInt(this.state.lastMonthCompletedCount['modabella']) /this.state.cutterCount * 100)}</td>\n                              </tr>\n                              <tr>\n                                <td>Number of cut garments (Total)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(this.state.lastMonthCompletedCount['total']) /this.state.cutterCount}</small>\n                                </td>\n                                <td/>\n                              </tr>\n                              <tr>\n                                <td/>\n                                <td/>\n                                <td>{this.calculateTotalSalary(operator)}</td>\n                              </tr>\n                            </>\n                          }\n                          {this.state.settings.isTransportEnable &&\n                          <tr>\n                            <td>Transport</td>\n                            <td>\n                              <div>Work Days: <input style={{width: '50px'}}\n                                                     className={'small border-0'}\n                                                     defaultValue={operator.lastMonthWRKDays}\n                                                     onChange={(e) => {\n                                                       operator.lastMonthWRKDays = parseInt(e.target.value);\n                                                       let operators = this.state.operators;\n                                                       operators[ind] = operator;\n                                                       this.setState({\n                                                         operators,\n                                                       });\n                                                     }} />\n                              </div>\n                              <div>\n                                Distance (KM) : {operator.distance}\n                              </div>\n                            </td>\n                            <td\n                              className={'text-right'}>{this.salaryFormatter(this.calculateTransport(operator))}</td>\n                          </tr>\n                          }\n                          <tr className={'non-printable'}>\n                            <td colSpan={3}>\n                              <Button onClick={(e) => {\n                                let op = operator;\n                                op.extraPayments.push({\n                                  label: '',\n                                  val: 0,\n                                });\n                                let operators = this.state.operators;\n                                operators[ind] = op;\n                                this.setState({\n                                  operators,\n                                });\n                              }} variant='primary'>Add Extra</Button>\n                            </td>\n                          </tr>\n                          {operator.extraPayments.map((payment, i) => {\n                            return (\n                              <>\n                                <tr className='non-printable'>\n                                  <td>\n                                    <Button size={'sm'} variant='danger'> - </Button>\n                                  </td>\n                                  <td className='vertical_align_middle'>\n                                    <input className={'small border-0 border-bottom'}\n                                           defaultValue={payment.label}\n                                           onChange={(e) => {\n                                             payment.label = e.target.value;\n                                             let op = operator;\n                                             op.extraPayments[i] = payment;\n                                             let operators = this.state.operators;\n                                             operators[ind] = op;\n                                             this.setState({\n                                               operators,\n                                             });\n                                           }} />\n                                  </td>\n                                  <td className='vertical_align_middle'> Rs.\n                                    <input className={'small border-0 border-bottom'}\n                                           defaultValue={payment.val}\n                                           onChange={(e) => {\n                                             payment.val = parseInt(e.target.value);\n                                             let op = operator;\n                                             op.extraPayments[i] = payment;\n                                             let operators = this.state.operators;\n                                             operators[ind] = op;\n                                             this.setState({\n                                               operators,\n                                             });\n                                           }} />\n                                  </td>\n                                </tr>\n                                <tr className='d-none printable-row'>\n                                  <td className='vertical_align_middle'>{payment.label}</td>\n                                  <td></td>\n                                  <td className='vertical_align_middle'>{this.salaryFormatter(payment.val)}</td>\n                                </tr>\n                              </>\n                            );\n                          })}\n                          <tr className={'border-top'}>\n                            <td>Total Salary</td>\n                            <td></td>\n                            <td className={'text-right border-bottom'}>\n                              <strong>{this.calculateTotalSalary(operator)}</strong>\n                            </td>\n                          </tr>\n                          </tbody>\n                        </Table>\n                      </div>\n                    );\n                  }\n                  return true;\n                })}\n              </Row>\n            </Container>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='primary' onClick={() => {\n              this.print();\n            }}>Print</Button>{' '}\n            <Button variant='secondary' onClick={this.handleClose}>Cancel</Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {designService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddDesign extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                description: '',\n                quantity: 1,\n                sewingValue: 0,\n                type: 1,\n                brand: '',\n                startTime: new Date(),\n                isComplete: false\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    handleSubmit = (event) => {\n\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n            designService.addDesign(this.state.form)\n                .then(\n                    data => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: \"\"\n                            },\n                        });\n                        this.notifySuccess(`Design \"${data.name}\" added successfully`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    getSawingValueDefault = (type, brand) => {\n        let val = 0;\n        if(type === 1){\n            if(brand === 'nolimit'){\n                val = 70\n            } else if(brand === 'cleopatra'){\n                val = 150\n            } else if(brand === 'modabella'){\n                val = 250\n            } else if(brand === 'sample'){\n                val = 250\n            }\n        } else {\n            if(brand === 'nolimit'){\n                val = 20\n            } else if(brand === 'cleopatra'){\n                val = 25\n            } else if(brand === 'modabella'){\n                val = 25\n            } else if(brand === 'sample'){\n                val = 25\n            }\n        }\n        return val;\n    };\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = parseInt(target.value);\n        const sewingValue = this.getSawingValueDefault(type, this.state.form.brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            type: type\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const sewingValue = this.getSawingValueDefault(this.state.form.type, brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            brand: brand\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h1>Add Design</h1>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} id=\"name\">\n                        <Form.Label column sm=\"2\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"description\">\n                        <Form.Label column sm=\"2\">\n                            Description\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type=\"text\" name={'description'} value={this.state.form.description}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label column sm=\"2\">Select Design Type</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control as=\"select\" name={'type'} onChange={this.handleDesignTypeChange} required>\n                                <option value=\"\"/>\n                                <option value=\"1\">Sawing</option>\n                                <option value=\"2\">Helper</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n                        <Form.Label column sm=\"2\">Select Brand</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control as=\"select\" name={'brand'} value={this.state.form.brand} onChange={this.handleBrandChange} required>\n                                <option value=\"\"/>\n                                <option value=\"nolimit\">Nolimit</option>\n                                <option value=\"cleopatra\">Cleopatra</option>\n                                <option value=\"modabella\">Moda Bella</option>\n                                <option value=\"sample\">Sample</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Form.Label column sm=\"2\">\n                            Quantity\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type={'number'} name={'quantity'} value={this.state.form.quantity} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"sewingValue\">\n                        <Form.Label column sm=\"2\">\n                            Sewing Value\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type={'number'} name={'sewingValue'} value={this.state.form.sewingValue} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\" disabled={this.state.isLoading} variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Add Design'}</Button>\n                </Form>\n\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Modal, Row} from \"react-bootstrap\";\nimport {designService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class EditDesign extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                description: '',\n                type: 1,\n                brand: '',\n                quantity: 0,\n                sewingValue: 0,\n                isComplete: false\n            },\n            modal:{\n                show: false,\n                title: '',\n                body: ''\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(this.props.design.name);\n        this.setState({\n            form: {\n                ...this.state.form,\n                name: this.props.design.name || '',\n                description: this.props.design.description || '',\n                type: this.props.design.type || 1,\n                brand: this.props.design.brand || '',\n                quantity: this.props.design.quantity || 0,\n                sewingValue: this.props.design.sewingValue || 0,\n                isComplete: this.props.design.isComplete || false,\n            }\n        })\n    }\n\n    handleSubmit = (event, data) => {\n\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n            designService.editDesign(this.props.design.id, this.state.form).then(\n                data => {\n                    this.setState({\n                        isLoading: false,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Design \"${this.state.form.name}\" Updated successfully`\n                        }\n                    });\n                    this.props.design.description = this.state.form.description;\n                    this.props.design.type = this.state.form.type;\n                    this.props.design.brand = this.state.form.brand;\n                    this.props.design.name = this.state.form.name;\n                    this.props.design.quantity = this.state.form.quantity;\n                    this.props.design.sewingValue = this.state.form.sewingValue;\n                    this.props.design.isComplete = this.state.form.isComplete;\n                },\n                error => {\n                    this.setState({msg: error, isLoading: false});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    getSawingValueDefault = (type, brand) => {\n        let val = 0;\n        if(type === 1){\n            if(brand === 'nolimit'){\n                val = 70\n            } else if(brand === 'cleopatra'){\n                val = 150\n            } else if(brand === 'modabella'){\n                val = 250\n            } else if(brand === 'sample'){\n                val = 250\n            }\n        } else {\n            if(brand === 'nolimit'){\n                val = 20\n            } else if(brand === 'cleopatra'){\n                val = 25\n            } else if(brand === 'modabella'){\n                val = 25\n            } else if(brand === 'sample'){\n                val = 25\n            }\n        }\n        return val;\n    };\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = parseInt(target.value);\n        const sewingValue = this.getSawingValueDefault(type, this.state.form.brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            type: type,\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const sewingValue = this.getSawingValueDefault(this.state.form.type, brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            brand: brand\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                show: false\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} id=\"name\">\n                        <Form.Label column sm=\"3\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange}  required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"description\">\n                        <Form.Label column sm=\"3\">\n                            Description\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type=\"text\" name={'description'} value={this.state.form.description}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label column sm=\"3\">Select Design Type</Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control as=\"select\" name={'type'} value={this.state.form.type} onChange={this.handleDesignTypeChange}>\n                                <option value=\"1\">Sawing</option>\n                                <option value=\"2\">Helper</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n                        <Form.Label column sm=\"3\">Select Brand</Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control as=\"select\" name={'brand'} value={this.state.form.brand} onChange={this.handleBrandChange} required>\n                                <option value=\"\"></option>\n                                <option value=\"nolimit\">Nolimit</option>\n                                <option value=\"cleopatra\">Cleopatra</option>\n                                <option value=\"modabella\">Moda Bella</option>\n                                <option value=\"sample\">Sample</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Form.Label column sm=\"3\">\n                            Quantity\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type={'number'} name={'quantity'} value={this.state.form.quantity} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"sewingValue\">\n                        <Form.Label column sm=\"3\">\n                            Sewing Value\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type={'number'} name={'sewingValue'} value={this.state.form.sewingValue} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Col sm=\"12\">\n                            <Form.Check type=\"checkbox\" id={'isComplete'} label=\"Check here for complete the design\" name={'isComplete'} checked={this.state.form.isComplete} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\" disabled={this.state.isLoading} variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Edit Design'}</Button>\n                </Form>\n\n                <Modal show={this.state.modal.show} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.props.editComplete}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\nimport {faCopy, faEdit, faInfo, faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport EditDesign from \"./EditDesign\";\nimport _ from \"lodash\";\nimport {authenticationService, designService, operationService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport Moment from 'react-moment';\n\n\nexport default class ViewDesign extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            selectedOperation: [],\n            filteredDesign: [],\n            filter: {\n                keyword: '',\n                type: '',\n                brand: '',\n            },\n            currentUser: null,\n            view: 'incomplete',\n            modal: {\n                showConfirmation: false,\n                showInfoModal: false,\n                showOperationInfoModal: false,\n                showEditModal: false,\n                showDuplicateModal: false,\n                title: '',\n                body: ''\n            },\n            selectedDesign: {},\n            isLoading: false\n        };\n    }\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    componentDidMount() {\n        authenticationService.currentUser.subscribe(x => this.setState({\n            currentUser: x,\n        }));\n        this.fetchDesigns(this.state.view);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevState.filter !== this.state.filter || prevState.designs !== this.state.designs){\n            this.filterData();\n        }\n    }\n\n    fetchDesigns = (type) => {\n        trackPromise(\n            designService.getAllDesigns(type).then(\n                data => {\n                    this.setState({\n                        designs: data\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n    }\n\n    editDesign = (design) => {\n        this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showEditModal: true,\n                title: 'Edit Design',\n                body: ''\n            }\n        })\n    }\n\n    removeDesign = (design) => {\n        this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showConfirmation: true,\n                title: `Remove Design ${design.name}`,\n                body: 'Are you sure ?'\n            }\n        })\n    }\n\n    confirmDelete = () => {\n        this.setState({isLoading: true});\n        trackPromise(\n            designService.deleteDesign(this.state.selectedDesign.id).then(\n                () => {\n                    let designs = this.state.designs;\n                    let ind = designs.indexOf(this.state.selectedDesign);\n                    designs.splice(ind, 1);\n                    this.setState({\n                        designs: designs,\n                        isLoading: false,\n                    });\n                    this.handleClose();\n                    this.notifySuccess(`${this.state.selectedDesign.name} successfully deleted`)\n                },\n                error => {\n                    this.notifyError(error);\n                }\n            ));\n    }\n\n    duplicateDesign = (design) => {\n        let selectedDesign = _.cloneDeep(design);\n        delete selectedDesign.id;\n        selectedDesign.steps && selectedDesign.steps.forEach(function (step) {\n            delete step.id;\n            delete step.operatorSteps;\n            delete step.designId;\n        })\n        console.log(selectedDesign);\n        this.setState({\n            selectedDesign: selectedDesign,\n            modal: {\n                ...this.state.modal,\n                showDuplicateModal: true,\n                title: `Duplicate Design`,\n            }\n        })\n    }\n\n    confirmDesignDuplicate = () => {\n\n        this.setState({isLoading: true});\n        let selectedDesign = this.state.selectedDesign;\n        trackPromise(\n            designService.addDesign({\n                \"name\": selectedDesign.name,\n                \"description\": selectedDesign.description,\n                \"brand\": selectedDesign.brand,\n                \"quantity\": 0,\n                \"sewingValue\": selectedDesign.sewingValue,\n                \"startTime\": new Date(),\n                \"type\": selectedDesign.type,\n                \"isComplete\": false\n            })\n                .then(\n                    data => {\n                        this.duplicateOperations(data.id);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    duplicateOperations = (id) => {\n\n        let selectedDesign = this.state.selectedDesign;\n        let steps = [];\n        selectedDesign.steps && selectedDesign.steps.forEach(function (step) {\n            step.designId = id;\n            steps.push(step)\n        })\n        trackPromise(\n            operationService.addAllOperations(steps)\n                .then(\n                    () => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: \"\"\n                            },\n                            modal: {\n                                ...this.state.modal,\n                                showDuplicateModal: false,\n                                title: 'Success',\n                                body: `Design \"${selectedDesign.name}\" duplicated successfully`\n                            }\n                        });\n\n                        this.notifySuccess(`Design \"${selectedDesign.name}\" duplicated successfully`)\n                        this.fetchDesigns('incomplete');\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    viewDesignInfo = async (design) => {\n        await this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showInfoModal: true,\n                title: `${design.name} Details`,\n                body: ''\n            }\n        })\n\n        this.calculateTotalTimeToComplete();\n        this.calculateCompletedTime();\n\n    }\n\n    calculateTimeToComplete = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let operationTimes = 0;\n        selectedDesign.steps.map((operation) => {\n            return operationTimes += operation.estimatedTime;\n        });\n        return Math.floor(operationTimes / 60) + ' Minutes  ' + operationTimes % 60 + ' Seconds';\n    }\n\n    calculateCompletedTime = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let totalCompletedTime = 0;\n        selectedDesign.steps.map((operation) => {\n\n            operation.operatorSteps && operation.operatorSteps.map((operatorStep) => {\n                return totalCompletedTime += operatorStep.quantity * operation.estimatedTime;\n            });\n            return 0\n        });\n        selectedDesign.totalCompletedTime = totalCompletedTime;\n        this.setState({\n            selectedDesign: selectedDesign\n        })\n    }\n\n    calculateTotalTimeToComplete = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let operationTimes = 0;\n        selectedDesign.steps.map((operation) => {\n            return operationTimes += operation.estimatedTime;\n        });\n        selectedDesign.totalTimeToComplete = operationTimes * this.state.selectedDesign.quantity;\n        this.setState({\n            selectedDesign: selectedDesign\n        })\n        return this.state.selectedDesign\n    }\n\n    timeFormatter = (time) => {\n        return Math.floor(time / 60 / 60) + ' Hours  ' + Math.floor(time / 60 % 60) + ' Minutes  ' + time % 60 + ' Seconds';\n    }\n\n    operationCompletedCount = (operatorSteps) => {\n        if (!operatorSteps) {\n            return 0\n        }\n        let completedCount = 0;\n        operatorSteps.map((operatorStep) => {\n            return completedCount += operatorStep.quantity;\n        });\n        return (completedCount < this.state.selectedDesign.quantity ?\n            <span\n                className='text-warning'>{completedCount}</span> : completedCount > this.state.selectedDesign.quantity ?\n                <span className='text-danger'>{completedCount}</span> :\n                <span className='text-success'>{completedCount}</span>);\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showConfirmation: false,\n                showEditModal: false,\n                showInfoModal: false,\n                showOperationInfoModal: false,\n                showDuplicateModal: false,\n            }\n        });\n    }\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = target.value;\n        const filter = {\n            ...this.state.filter,\n            type: type\n        }\n        this.setState({\n            filter: filter,\n        });\n    }\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const filter = {\n            ...this.state.filter,\n            brand: brand\n        }\n        this.setState({\n            filter: filter,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name, value);\n\n        this.setState({\n            filter: {\n                ...this.state.filter,\n                [name]: value\n            }\n        });\n    }\n\n    filterData = () => {\n        let brand = this.state.filter.brand;\n        let type = this.state.filter.type;\n        let keyword = this.state.filter.keyword.toLowerCase();\n        let filteredData = this.state.designs;\n        filteredData = _.filter(filteredData, function (design){\n            if(design.name.toLowerCase().includes(keyword) || design.description.toLowerCase().includes(keyword)){\n                return design;\n            }\n        });\n        if(brand !== '') {\n            filteredData = _.filter(filteredData, function (design) {\n                return design != null && design.brand === brand;\n            });\n        }\n        if(type !== '') {\n            filteredData = _.filter(filteredData, function (design) {\n                return design != null && design.type === parseInt(type);\n            });\n        }\n        this.setState({\n            filteredDesign: filteredData\n        })\n    }\n\n\n    viewOperationInfo = (design, operation) => {\n\n        this.setState({\n            selectedOperation: operation,\n            modal: {\n                ...this.state.modal,\n                showOperationInfoModal: true,\n                title: `${design.name} - ${operation.name} Details`,\n            }\n        })\n    }\n\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <div className=\"d-flex flex-row justify-content-between mt-2 mb-2\">\n                    <div className=\"custom-file w-25 text-left\">\n                        <h2>View Designs</h2>\n                    </div>\n                    <div className={'flex-row d-flex flex-grow-1'}>\n\n                        <Form.Group as={Col} id=\"name\">\n                            <div>\n                                <Form.Control type=\"text\" name={'keyword'} value={this.state.filter.keyword}\n                                              onChange={this.handleInputChange} required/>\n                            </div>\n                        </Form.Group>\n                    </div>\n                    <div className={'flex-row d-flex'}>\n\n                        <Form.Group className={'mb-0'} as={Col} controlId=\"exampleForm.ControlSelect1\">\n                            <div>\n                                <Form.Control defaultValue={''} className={'w-auto'} as=\"select\" name={'type'} onChange={this.handleDesignTypeChange}>\n                                    <option value=\"\" disabled>Select Type</option>\n                                    <option value=\"\"/>\n                                    <option value=\"1\">Sawing</option>\n                                    <option value=\"2\">Helper</option>\n                                </Form.Control>\n                            </div>\n                        </Form.Group>\n\n                        <Form.Group className={'mb-0'} as={Col} controlId=\"exampleForm.ControlSelect1\">\n                            <div>\n                                <Form.Control defaultValue={''} className={'w-auto'} as=\"select\" name={'brand'} onChange={this.handleBrandChange} required>\n                                    <option value=\"\" disabled>Select Brand</option>\n                                    <option value=\"\"/>\n                                    <option value=\"nolimit\">Nolimit</option>\n                                    <option value=\"cleopatra\">Cleopatra</option>\n                                    <option value=\"modabella\">Moda Bella</option>\n                                    <option value=\"sample\">Sample</option>\n                                </Form.Control>\n                            </div>\n                        </Form.Group>\n                    </div>\n                    <div>\n                        <ButtonGroup size=\"sm\">\n                            <Button variant={this.state.view === 'incomplete' ? 'primary' : 'outline-primary'}\n                                    onClick={() => {\n                                        this.setState({view: 'incomplete'});\n                                        this.fetchDesigns('incomplete')\n                                    }}>Incomplete</Button>\n                            <Button variant={this.state.view === 'complete' ? 'primary' : 'outline-primary'}\n                                    onClick={() => {\n                                        this.setState({view: 'complete'});\n                                        this.fetchDesigns('complete')\n                                    }}>Complete</Button>\n                            <Button variant={this.state.view === 'all' ? 'primary' : 'outline-primary'} onClick={() => {\n                                this.setState({view: 'all'});\n                                this.fetchDesigns('all')\n                            }}>All</Button>\n                        </ButtonGroup>\n                    </div>\n                </div>\n                <br/>\n                <Row>\n                    <Table striped bordered hover size=\"sm\" style={{'width': '100%'}}>\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th className={'d-none d-md-table-cell'}>Desc</th>\n                            <th className={'d-none d-md-table-cell'}>Type</th>\n                            <th className={'d-none d-md-table-cell'}>Brand</th>\n                            <th width={90} className={'d-none d-md-table-cell'}>Quantity</th>\n                            <th width={110}>Status</th>\n                            <th width={145}>Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.filteredDesign.map((design, ind) => {\n                            return (\n                                <tr key={ind}>\n                                    <td title={design.name}>\n                                        <div>{design.name}</div>\n                                    </td>\n                                    <td className={'d-none d-md-table-cell text-truncate'}\n                                        title={design.description}>{design.description}</td>\n                                    <td className={'d-none d-md-table-cell pr-3'}>{design.type === 1 ? 'Sawing' : 'Helper'}</td>\n                                    <td className={'d-none d-md-table-cell pr-3 text-capitalize'}>{design.brand}</td>\n                                    <td className={'d-none d-md-table-cell text-right pr-3'}>{design.quantity}</td>\n                                    <td>{design.isComplete ? 'Complete' : 'Not Complete'}</td>\n                                    <td>\n                                        <div className={\"d-flex align-items-center justify-content-center\"}>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.viewDesignInfo(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Details\"} icon={faInfo}/>\n                                            </Button>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.editDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Edit\"} icon={faEdit}/>\n                                            </Button>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.duplicateDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Duplicate\"} icon={faCopy}/>\n                                            </Button>\n                                            {this.state.currentUser && this.state.currentUser.roles.includes('admin') && !design.steps &&\n                                            <Button variant={\"danger\"} onClick={() => this.removeDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Delete\"} icon={faTrash}/>\n                                            </Button>\n                                            }\n                                        </div>\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Modal show={this.state.modal.showConfirmation} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmDelete}>\n                            {this.state.isLoading ? 'Loading' : 'Confirm'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showEditModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <EditDesign design={this.state.selectedDesign} history={this.props.history}\n                                    editComplete={() => this.handleClose()}/>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedDesign.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Desc</td>\n                                <td>{this.state.selectedDesign.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Quantity</td>\n                                <td>{this.state.selectedDesign.quantity}</td>\n                            </tr>\n                            <tr>\n                                <td>Sewing Value</td>\n                                <td>{this.state.selectedDesign.sewingValue}</td>\n                            </tr>\n                            <tr>\n                                <td>Time To Complete One</td>\n                                <td>{this.calculateTimeToComplete()}</td>\n                            </tr>\n                            <tr>\n                                <td>Time To Complete {this.state.selectedDesign.quantity}</td>\n                                <td>{this.timeFormatter(this.state.selectedDesign.totalTimeToComplete)}</td>\n                            </tr>\n                            <tr>\n                                <td>Currently Completed</td>\n                                <td>{this.timeFormatter(this.state.selectedDesign.totalCompletedTime)}</td>\n                            </tr>\n                            <tr>\n                                <td> Completed Percentage</td>\n                                <td>{Math.round((this.state.selectedDesign.totalCompletedTime / this.state.selectedDesign.totalTimeToComplete) * 10000) / 100} %</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th/>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.selectedDesign.steps && this.state.selectedDesign.steps.map((step, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{step.name}</td>\n                                        <td className={'text-right'}>{this.operationCompletedCount(step.operatorSteps)}</td>\n                                        <td className={'text-center'}>\n                                            <Button variant={\"outline-primary\"}\n                                                    onClick={() => this.viewOperationInfo(this.state.selectedDesign, step)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon icon={faInfo}/>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                {/*Duplicate modal*/}\n                <Modal show={this.state.modal.showDuplicateModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Row className={\"mb-3 w-100\"}>\n                            <Col md={12}>\n                                <Form.Group className={'mb-3'} as={Row} id=\"name\">\n                                    <Form.Label column sm=\"2\">\n                                        Name\n                                    </Form.Label>\n                                    <Col sm=\"10\">\n                                        <Form.Control type=\"text\" name={'description'} value={this.state.selectedDesign.name}\n                                                      onChange={\n                                                          (event) => {\n                                                              this.setState({\n                                                                  selectedDesign: {\n                                                                      ...this.state.selectedDesign,\n                                                                      name: event.target.value\n                                                                  }\n                                                              });\n                                                          }\n                                                      } required/>\n                                    </Col>\n                                </Form.Group>\n                            </Col>\n                            <Col md={12}>\n                                <Form.Group className={'mb-3'} as={Row} id=\"description\">\n                                    <Form.Label column sm=\"2\">\n                                        Description\n                                    </Form.Label>\n                                    <Col sm=\"10\">\n                                        <Form.Control type=\"text\" name={'description'} value={this.state.selectedDesign.description}\n                                                      onChange={\n                                                          (event) => {\n                                                              this.setState({\n                                                                  selectedDesign: {\n                                                                      ...this.state.selectedDesign,\n                                                                      description: event.target.value\n                                                                  }\n                                                              });\n                                                          }\n                                                      } required/>\n                                    </Col>\n                                </Form.Group>\n                            </Col>\n                            <Col md={12}>\n                                <Form.Group className={'mb-3'} as={Row} id=\"quantity\">\n                                    <Form.Label column sm=\"2\">\n                                        Quantity\n                                    </Form.Label>\n                                    <Col sm=\"10\">\n                                        <Form.Control type=\"text\" name={'quantity'} value={this.state.selectedDesign.quantity}\n                                                      onChange={\n                                                          (event) => {\n                                                              this.setState({\n                                                                  selectedDesign: {\n                                                                      ...this.state.selectedDesign,\n                                                                      quantity: event.target.value\n                                                                  }\n                                                              });\n                                                          }\n                                                      } required/>\n                                    </Col>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Description</th>\n                                <th>Estimated Time</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.selectedDesign.steps && this.state.selectedDesign.steps.map((step, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{step.name}</td>\n                                        <td>{step.description}</td>\n                                        <td>{step.estimatedTime}</td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"primary\" onClick={this.confirmDesignDuplicate}>\n                            Duplicate\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal scrollable show={this.state.modal.showOperationInfoModal} onHide={() => {\n                    this.setState({\n                        modal: {\n                            ...this.state.modal,\n                            showOperationInfoModal: false,\n                        }\n                    });\n                }} centered>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedOperation.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Description</td>\n                                <td>{this.state.selectedOperation.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Estimated Time (S)</td>\n                                <td>{this.state.selectedOperation.estimatedTime}</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th width={150}>Completed On</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n\n                            {this.state.selectedOperation.operatorSteps && this.state.selectedOperation.operatorSteps.map((operatorStep, ind) => {\n                                return (\n                                  <tr key={ind}>\n                                      <td>{operatorStep.operator && operatorStep.operator.name}</td>\n                                      <td>{operatorStep.quantity}</td>\n                                      <td><Moment format={'YYYY-MMM-DD'}>{operatorStep.completeTime}</Moment></td>\n                                  </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={() => {\n                            this.setState({\n                                modal: {\n                                    ...this.state.modal,\n                                    showOperationInfoModal: false,\n                                }\n                            });\n                        }}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React, {Fragment} from \"react\";\nimport {Button, Col, Container, Form, Modal, Row} from \"react-bootstrap\";\nimport {faClock, faPlus, faUpload} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Timer from \"react-compound-timer\";\nimport {designService, operationService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddOperation extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.userTimer = React.createRef();\n        this.state = {\n            designs: [],\n            selectedDesign: false,\n            selectedOperationIndex: false,\n            form: [\n                {\n                    name: '',\n                    description: '',\n                    estimatedTime: '',\n                    designId: null,\n                }\n            ],\n            modal: {\n                show: false,\n                title: '',\n                body: ''\n            },\n            timerModal: false,\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchDesigns();\n    }\n\n    fetchDesigns() {\n        trackPromise(\n        designService.getIncompleteDesignsWithOperations().then(\n            data => {\n                let operations = data[0] && data[0].steps ? data[0].steps : [{\n                    name: '',\n                    description: '',\n                    estimatedTime: 0,\n                    designId: data[0] ? data[0].id : undefined\n                }];\n                this.setState({\n                    designs: data,\n                    selectedDesign: data[0],\n                    form: operations\n                });\n            },\n            error => {\n                this.setState({msg: error});\n                console.error('Error:', error);\n            }\n        ));\n    }\n\n    handleAddOperation = () => {\n        const values = [...this.state.form];\n        values.unshift({name: '', description: '', estimatedTime: 0, designId: this.state.selectedDesign.id});\n        this.setState({\n            form: values\n        });\n    };\n\n    handleRemoveOperation = (index, isInDb) => {\n        const values = [...this.state.form];\n        values.splice(index, 1);\n        this.setState({\n            form: values\n        });\n    };\n\n    handleUpdateOperation = (index, event) => {\n        if (!this.state.selectedDesign) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false\n        }\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n\n            const operation = this.state.form[index];\n            delete operation.isChange;\n            trackPromise(\n            operationService.updateOperations(operation.id, operation).then(\n                data => {\n                    let values = this.state.form;\n                    values[index].isChange = false;\n                    values[index].id = data.id;\n                    this.setState({\n                        isLoading: false,\n                        form: values,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Operation \"${data.name}\" Added Successfully`\n                        }\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleCreateOperation = (index, event) => {\n        if (!this.state.selectedDesign) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false\n        }\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n\n            const operation = this.state.form[index];\n            delete operation.isChange;\n            trackPromise(\n            operationService.addOperations(operation).then(\n                data => {\n                    let values = this.state.form;\n                    values[index].isChange = false;\n                    values[index].id = data.id;\n                    this.setState({\n                        isLoading: false,\n                        form: values,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Operation \"${data.name}\" Added Successfully`\n                        }\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleInputChange = (index, event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n\n        let values = this.state.form;\n        values[index][name] = value;\n        values[index].isChange = value !== '';\n        this.setState({\n            form: values\n        });\n    }\n\n    handleDesignChange = (event) => {\n        const target = event.target;\n        const index = target.value;\n\n        if (index === '') {\n            this.setState({\n                form: [],\n                selectedDesign: false\n            });\n            return false;\n        }\n        const design = this.state.designs[index];\n\n        const operations = design.steps ? design.steps : [{\n            name: '',\n            description: '1',\n            estimatedTime: 0,\n            designId: design.id,\n        }]\n        this.setState({\n            form: operations,\n            selectedDesign: design\n        });\n    }\n\n    handleTimer = (index) => {\n        this.setState({\n            timerModal: true,\n            selectedOperationIndex: index\n        })\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                show: false\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h2>Add Operations</h2>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label>Select Design</Form.Label>\n                        <Form.Control as=\"select\" onChange={this.handleDesignChange}>\n                            {this.state.designs.length > 0 && this.state.designs.map((design, index) => (\n                                <option value={index} key={index}>{design.name}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                    {this.state.form.length > 0 && this.state.form.map((inputField, index) => (\n                        <Fragment key={index}>\n                            <Row className={'align-items-center no-gutters'}>\n                                <h5 className={'mr-2'}>Operation {index + 1} --</h5><h6 className={'mr-2'}> Hourly\n                                Target </h6><h6 className={'mr-2'}> (Idle)\n                                = {Math.floor(3600 / inputField.estimatedTime)}, </h6><h6 className={'mr-2'}> (Minimum)\n                                = {Math.floor((3600 / inputField.estimatedTime) * .8)}</h6>\n                            </Row>\n                            <hr className={'mt-0'}/>\n                            <Form.Group as={Row}>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Name\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name={'name'} value={inputField.name}\n                                                  onChange={event => this.handleInputChange(index, event)} required/>\n                                </Col>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Description\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name={'description'} value={inputField.description}\n                                                  onChange={event => this.handleInputChange(index, event)}/>\n                                </Col>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Estimated Time (S)\n                                    </Form.Label>\n                                    <Row>\n                                        <Col xs={9}>\n                                            <Form.Control type=\"number\" name={'estimatedTime'}\n                                                          value={inputField.estimatedTime}\n                                                          onChange={event => this.handleInputChange(index, event)}\n                                                          required/>\n                                        </Col>\n                                        <Col xs={3}>\n                                            <Button type=\"button\" variant={'dark'} onClick={() => this.handleTimer(index)}>\n                                                <FontAwesomeIcon icon={faClock}/>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                                <Col sm={12} md={3}\n                                     className={'mb-2 d-flex align-items-end justify-content-center pt-3'}>\n                                    {index === 0 &&\n                                    <Button type=\"button\" variant={'dark'} onClick={() => this.handleAddOperation()}>\n                                        <FontAwesomeIcon icon={faPlus}/>\n                                    </Button>\n                                    }\n                                    {/*&nbsp;*/}\n                                    {/*{this.state.form.length !== (index + 1) &&*/}\n                                    {/*<Button type=\"button\" variant={'dark'}*/}\n                                    {/*        onClick={() => this.handleRemoveOperation(index, !!this.state.form.id)}>*/}\n                                    {/*    <FontAwesomeIcon icon={faTrash}/>*/}\n                                    {/*</Button>*/}\n                                    {/*}*/}\n\n                                    &nbsp;\n                                    {inputField.isChange && inputField.id &&\n                                    <Button type=\"button\" variant={'dark'}\n                                            disabled={this.state.isLoading || !this.state.selectedDesign || inputField.name.replace(/ /g, \"\") === '' || inputField.description.replace(/ /g, \"\") === '' || inputField.estimatedTime < 1}\n                                            onClick={(event) => this.handleUpdateOperation(index, event)}>\n                                        <FontAwesomeIcon icon={faUpload}/>\n                                    </Button>\n                                    }\n                                    {inputField.isChange && !inputField.id &&\n                                    <Button type=\"button\" variant={'dark'}\n                                            disabled={this.state.isLoading || !this.state.selectedDesign || inputField.name.replace(/ /g, \"\") === '' || inputField.description.replace(/ /g, \"\") === '' || inputField.estimatedTime < 1}\n                                            onClick={(event) => this.handleCreateOperation(index, event)}>\n                                        <FontAwesomeIcon icon={faUpload}/>\n                                    </Button>\n                                    }\n                                </Col>\n                            </Form.Group>\n                        </Fragment>\n\n                    ))}\n\n                </Form>\n\n                <Modal show={this.state.modal.show} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.timerModal} onHide={()=>{this.setState({timerModal:false})}} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Timer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className={'text-center'}>\n\n\n                        <Timer ref={this.userTimer}\n                               initialTime={0}\n                               startImmediately={false}\n                        >\n                            {({ start, resume, pause, stop, reset }) => (\n                                <React.Fragment>\n                                    <Row>\n                                        <h1 className=\" col-6 pr-0 text-center\"><Timer.Minutes /> min</h1>\n                                        <h1 className=\" col-6 text-center\"><Timer.Seconds /> sec</h1>\n                                    </Row>\n                                </React.Fragment>\n                            )}\n                        </Timer>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                        <Button variant=\"primary\" onClick={()=>{this.userTimer.current.start()}}>\n                            start\n                        </Button>\n                        <Button variant=\"secondary\" onClick={()=>{this.userTimer.current.pause()}}>\n                            pause\n                        </Button>\n                        <Button variant=\"warning\" onClick={()=>{this.userTimer.current.reset()}}>\n                            reset\n                        </Button>\n                        <Button variant=\"info\" onClick={()=>{\n                            let form = this.state.form;\n                            let selectedOperation = form[this.state.selectedOperationIndex];\n                            selectedOperation.estimatedTime = Math.floor(this.userTimer.current.getTime()/1000);\n                            selectedOperation.isChange = true;\n                            console.log(form);\n                            this.setState({\n                                form: form,\n                                timerModal: false,\n                            })\n                        }}>\n                            set\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Container, Modal, Row, Table} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faInfo} from \"@fortawesome/free-solid-svg-icons\";\nimport Moment from \"react-moment\";\nimport {designService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class ViewOperation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            selectedOperation: [],\n            modal: {\n                showInfoModal: false,\n                title: '',\n                body: ''\n            }\n        };\n    }\n\n    componentDidMount() {\n        trackPromise(\n        designService.getAllIncompleteDesignsWithOperator().then(\n            data => {\n                this.setState({\n                    designs: data\n                });\n            },\n            error => {\n                this.setState({msg: error});\n                console.error('Error:', error);\n            }\n        ));\n    }\n\n\n    operationCompletedCount = (operatorSteps, design) => {\n        if (!operatorSteps) {\n            return 0\n        }\n        let completedCount = 0;\n        operatorSteps.map((operatorStep, ind) => {\n            return completedCount += operatorStep.quantity;\n        });\n        return (completedCount < design.quantity ?\n            <span\n                className='text-warning'>{completedCount}</span> : completedCount > design.quantity ?\n                <span className='text-danger'>{completedCount}</span> :\n                <span className='text-success'>{completedCount}</span>);\n    }\n\n\n    viewOperationInfo = (design, operation) => {\n\n        this.setState({\n            selectedOperation: operation,\n            modal: {\n                ...this.state.modal,\n                showInfoModal: true,\n                title: `${design.name} - ${operation.name} Details`,\n            }\n        })\n    }\n\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showInfoModal: false,\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Container>\n                <br/>\n                <h2>View Operations</h2>\n                <br/>\n                {this.state.designs.map((design, ind) => {\n                    return (\n                        <Row key={ind}>\n                            <h4>{design.name} - {design.description} </h4>\n                            <Table striped bordered hover size=\"sm\">\n                                <thead>\n                                <tr>\n                                    <th>Op. Name</th>\n                                    <th className={'d-none d-md-table-cell'}>Op. Description</th>\n                                    <th width={110} className={'d-none d-md-table-cell'}>Est. Time</th>\n                                    <th width={100}>Completed</th>\n                                    <th width={50}></th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {design.steps && design.steps.map((step, ind) => {\n                                    return (\n                                        <tr key={ind}>\n                                            <td>{step.name}</td>\n                                            <td className={'d-none d-md-table-cell'}>{step.description}</td>\n                                            <td className={'d-none d-md-table-cell'}>{step.estimatedTime}</td>\n                                            <td className={'text-right'}>{this.operationCompletedCount(step.operatorSteps, design)}</td>\n                                            <td className={'text-center'}>\n                                                <Button variant={\"outline-primary\"}\n                                                        onClick={() => this.viewOperationInfo(design, step)}\n                                                        size={\"sm\"}>\n                                                    <FontAwesomeIcon icon={faInfo}/>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </Table>\n                        </Row>\n                    )\n                })}\n\n\n                <Modal scrollable show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedOperation.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Description</td>\n                                <td>{this.state.selectedOperation.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Estimated Time (S)</td>\n                                <td>{this.state.selectedOperation.estimatedTime}</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th width={150}>Completed On</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n\n                            {this.state.selectedOperation.operatorSteps && this.state.selectedOperation.operatorSteps.map((operatorStep, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{operatorStep.operator && operatorStep.operator.name}</td>\n                                        <td>{operatorStep.quantity}</td>\n                                        <td><Moment format={'YYYY-MMM-DD'}>{operatorStep.completeTime}</Moment></td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from 'react';\nimport {Button, Container, Form, Row} from 'react-bootstrap';\nimport lodash from 'lodash';\nimport {operatorService} from '../../../services';\nimport {toast} from 'react-toastify';\nimport {trackPromise} from 'react-promise-tracker';\nimport DatePicker from 'react-date-picker';\n\nexport default class OperatorOperations extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      operators: [],\n      designs: [],\n      operations: [],\n      selectedOperator: false,\n      selectedDesign: false,\n      selectedOperation: false,\n      form: {\n        operatorId: '',\n        stepId: '',\n        quantity: 0,\n        completedTime: new Date(),\n      },\n      isLoading: false,\n    };\n\n    // this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.fetchOperators();\n    this.fetchDesigns();\n  }\n\n  notifyError = (error) => toast.error(error);\n  notifySuccess = (msg) => toast.success(msg);\n\n  fetchDesigns() {\n    trackPromise(\n      operatorService.fetchDesigns()\n        .then(\n          data => {\n            this.setState({\n              designs: data,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  }\n\n  fetchOperators() {\n    trackPromise(\n      operatorService.getMachineOperatorsAndHelpers()\n        .then(\n          data => {\n            this.setState({\n              operators: data,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  }\n\n  handleDesignChange = (event) => {\n    const target = event.target;\n    const index = target.value;\n\n    if (index === '') {\n      this.setState({\n        selectedDesign: false,\n        selectedOperation: false,\n      });\n      return false;\n    }\n    const design = this.state.designs[index];\n\n    const operations = design.steps ? design.steps : false;\n    this.setState({\n      operations: operations,\n      selectedDesign: design,\n      selectedOperation: false,\n      form: {\n        ...this.state.form,\n        completedTime: new Date(),\n      }\n    });\n  };\n\n  handleSubmit = (event) => {\n    trackPromise(\n      operatorService.addOperatorOperations({\n        'quantity': this.state.form.quantity,\n        'completeTime': this.state.form.completedTime,\n        'operatorId': this.state.selectedOperator.id,\n        'stepId': this.state.selectedOperation.id,\n\n      }).then(\n        data => {\n          let completedQuantity = lodash.cloneDeep(data.quantity);\n          console.log(completedQuantity);\n          this.setState({\n            form: {\n              ...this.state.form,\n              quantity: 0,\n            },\n          });\n          this.notifySuccess(`${this.state.selectedOperator ? this.state.selectedOperator.name : ''} has\n                    completed ${completedQuantity} of ${this.state.selectedDesign ? this.state.selectedDesign.name : ''} - ${this.state.selectedOperation ? this.state.selectedOperation.name : ''}`);\n        },\n        error => {\n          this.notifyError(error);\n        },\n      ),\n    );\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n    const name = target.name;\n\n    this.setState({\n      form: {\n        ...this.state.form,\n        [name]: value,\n      },\n    });\n  };\n\n  handleDateChange = (event) => {\n    const name = 'completedTime';\n\n    this.setState({\n      form: {\n        ...this.state.form,\n        [name]: event,\n      },\n    });\n  };\n\n  render() {\n    return (\n\n      <div>\n        <Container>\n          <div\n            aria-live='polite'\n            aria-atomic='true'\n            style={{\n              position: 'relative',\n              minHeight: '0',\n            }}>\n          </div>\n          <br />\n          <h2>Operator Operations</h2>\n          <br />\n          <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n            <Form.Group className={'mt-3'} controlId='operators'>\n              <Form.Label>Select Operator</Form.Label>\n              <Form.Control as='select' onChange={(event) => {\n                this.setState({selectedOperator: this.state.operators[event.target.value]});\n              }}>\n                <option/>\n                {this.state.operators.length > 0 && this.state.operators.map((operator, index) => (\n                  <option value={index} key={index}>{operator.name}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            {this.state.selectedOperator &&\n            <Form.Group className={'mt-3'} controlId='designs'>\n              <Form.Label>Select Design</Form.Label>\n              <Form.Control as='select' onChange={this.handleDesignChange}>\n                <option/>\n                {this.state.designs.length > 0 && this.state.designs.map((design, index) => {\n                  if((design.type === 1 && this.state.selectedOperator.type === '1') || (design.type === 2 && this.state.selectedOperator.type === '2')) {\n                    return <option value={index} key={index}>{design.name} ----- {design.description}</option>\n                  }\n                  return null;\n                }\n                )}\n              </Form.Control>\n            </Form.Group>\n            }\n            {this.state.selectedDesign &&\n            <Form.Group className={'mt-3'} controlId='operations'>\n              <Form.Label>Select Operation</Form.Label>\n              <Form.Control as='select' onChange={(event) => {\n                console.log(event.target.value);\n                this.setState({selectedOperation: this.state.operations[event.target.value]});\n              }}>\n                <option/>\n                {this.state.operations.length > 0 && this.state.operations.map((operation, index) => (\n                  <option value={index} key={index}>{operation.name}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            }\n\n            {this.state.selectedOperation &&\n            <>\n              <Form.Group className='mt-3' id='completedTime'>\n                <Form.Label>Completed Date</Form.Label>\n                <Row>\n                  <DatePicker name={'completedTime'} onChange={this.handleDateChange}\n                              value={this.state.form.completedTime} />\n                </Row>\n              </Form.Group>\n              <Form.Group className={'mt-3'} id='quantity'>\n                <Form.Label>\n                  Quantity\n                </Form.Label>\n                <Form.Control type='number' name={'quantity'} value={this.state.form.quantity}\n                              onChange={this.handleInputChange}\n                              required />\n              </Form.Group>\n            </>\n            }\n\n            {this.state.selectedOperation && this.state.form.quantity > 0 &&\n            <Button className={'mt-4 mb-4'} type='submit' variant={'dark'}\n                    disabled={this.state.isLoading || !this.state.selectedDesign}>\n              Add Operator Operations\n            </Button>\n            }\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n","import {React, useState} from 'react';\nimport {Form, Button} from 'react-bootstrap';\nimport {authenticationService} from \"../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport {useNavigate} from 'react-router-dom';\n\nconst SignIn = () => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [msg] = useState('')\n\n    const navigate = useNavigate()\n\n\n    const onFormSubmit = (e) => {\n        trackPromise(\n        authenticationService.login(email, password)\n            .then(\n                user => {\n                    if(user.roles.indexOf('admin') !== -1){\n                        navigate('/');\n                    } else if(user.roles.indexOf('manager') !== -1){\n                        navigate('/');\n                    } else if(user.roles.indexOf('manager') !== -1){\n                        navigate('/');\n                    }\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            )\n        );\n\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    return (\n        <div\n            style={{height: \"calc(100vh - 56px)\"}}\n            className=\"d-flex justify-content-center align-items-center\"\n        >\n            <div style={{width: 300}}>\n                <h1 className=\"text-center\">Sign in</h1>\n                <Form onSubmit={onFormSubmit}>\n                    <span className='text-danger'>{msg}</span>\n                    <Form.Group>\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            defaultValue={email}\n                            onChange={e => {\n                                setEmail(e.target.value);\n                            }}\n                        />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            defaultValue={password}\n                            onChange={e => {\n                                setPassword(e.target.value);\n                            }}\n                        />\n                    </Form.Group>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                        className=\"w-100 mt-3\"\n                    >\n                        Sign in\n                    </Button>\n                </Form>\n            </div>\n        </div>\n    )\n};\n\nexport default SignIn;\n","import React  from 'react';\nimport { Navigate } from 'react-router-dom';\nimport {authenticationService} from \"../services\";\n\nconst PrivateRoute = ({ children, roles }) => {\n\n    // return (\n    //     <Route {...rest}\n    //         render={routeProps => {\n    //             const currentUser = authenticationService.currentUserValue;\n    //             if (!currentUser) {\n    //                 // not logged in so redirect to login page with the return url\n    //                 return <Navigate to={{ pathname: '/sign-in', state: { from: routeProps.location } }} />\n    //             }\n    //\n    //             // check if route is restricted by role\n    //             if (roles && roles.filter(value => currentUser.roles.includes(value)).length === 0) {\n    //                 // role not authorised so redirect to home page\n    //                 return authenticationService.logout();\n    //             }\n    //             return <Outlet {...routeProps} />;\n    //         }}\n    //     />\n    // );\n  const currentUser = authenticationService.currentUserValue;\n  if (!currentUser) {\n    // not logged in so redirect to login page with the return url\n    return <Navigate to='/sign-in'/>\n  }\n\n  // check if route is restricted by role\n  if (roles && roles.filter(value => currentUser.roles.includes(value)).length === 0) {\n    // role not authorised so redirect to home page\n    return authenticationService.logout();\n  }\n  return children;\n    /*  we are spreading routeProps to be able to access this routeProps in the component. */\n};\n\nexport default PrivateRoute;\n","import React from 'react';\n\n// Set up all routes in App\nimport {Link, Route, Routes} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Using custom styled components from Global folder in components\n\n// Importing all routes\nimport {Container, Nav, Navbar, NavDropdown} from 'react-bootstrap';\nimport {AddOperator, EditOperator, ViewOperator} from './components/GarmentSawing/Operator';\nimport {AddDesign, EditDesign, ViewDesign} from './components/GarmentSawing/Design';\nimport {AddOperation, ViewOperation} from './components/GarmentSawing/Operation';\nimport OperatorOperations from './components/GarmentSawing/Operator/OperatorOperations';\nimport SignIn from './components/SignIn/SignIn';\nimport PrivateRoute from './helpers/PrivateRote';\nimport {authenticationService} from './services';\nimport {ToastContainer, toast} from 'react-toastify';\n\ntoast.configure({\n  autoClose: 15000,\n});\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n    };\n  }\n\n  componentDidMount() {\n    authenticationService.currentUser.subscribe(x => this.setState({\n      currentUser: x,\n    }));\n  }\n\n  allowNav(allowedRole) {\n    return this.state.currentUser?.roles?.filter(value => allowedRole.includes(value)).length > 0 ? true : false;\n  }\n\n  onLogOut = () => {\n    authenticationService.logout();\n  }; //clearing the context\n\n  render() {\n    return (\n      <div>\n        <ToastContainer />\n        <Navbar bg='dark' variant='dark' sticky='top' expand={'lg'} collapseOnSelect>\n\n          <Container fluid>\n            <Navbar.Brand>\n              {/*<img src=\"/logo192.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"React Bootstrap logo\"/>*/}\n              DEEZ\n            </Navbar.Brand>\n            {this.state.currentUser &&\n            <Navbar.Toggle aria-controls='basic-navbar-nav' />\n            }\n\n            {this.state.currentUser &&\n            <Navbar.Collapse id='basic-navbar-nav'>\n              <Nav className='me-auto'>\n                <NavDropdown title='Operators' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='11' as={Link} to='/add-operator'>\n                    Add Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='12' as={Link} to='/edit-operator'>\n                    Edit Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='13' as={Link} to='/view-operator'>\n                    View Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='14' as={Link} to='/operator-operations'>\n                    Operator Operations\n                  </NavDropdown.Item>\n                </NavDropdown>\n                <NavDropdown title='Design' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='21' as={Link} to='add-design'>\n                    Add Design\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='22' as={Link} to='view-design'>\n                    View Design\n                  </NavDropdown.Item>\n                </NavDropdown>\n                <NavDropdown title='Operations' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='31' as={Link} to='add-operations'>\n                    Add Operations\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='32' as={Link} to='view-operations'>\n                    View Operations\n                  </NavDropdown.Item>\n                </NavDropdown>\n              </Nav>\n              <Nav>\n                <h6\n                  className='text-center text-white mb-0 d-lg-flex align-items-center d-none'> {`Hello, ${this.state.currentUser.username}`} </h6>\n                <Nav.Link onClick={this.onLogOut}>Log out</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n            }\n          </Container>\n        </Navbar>\n        <Container fluid>\n          <Routes>\n            <Route path='/sign-in' element={<SignIn />} />\n            <Route\n              path=''\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/edit-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <EditOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/operator-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <OperatorOperations />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/edit-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <EditDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddOperation />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperation />\n                </PrivateRoute>\n              }\n            />\n          </Routes>\n        </Container>\n      </div>\n    );\n  }\n}\n","export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\nexport const increment = () => {\n  return {\n    type: INCREMENT,\n    payload: 1\n  };\n};\n\nexport const decrement = () => {\n  return {\n    type: DECREMENT,\n    payload: 1\n  };\n};\n","import { INCREMENT, DECREMENT } from \"../actions/counter\";\n\nconst initialState = {\n  count: 0\n};\n\nexport const counter = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        count: state.count - action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { counter } from \"./counter\";\n\n// Using combine reducers to break up reducers into different files\nexport default combineReducers({\n  counter\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Keep this puppy here for later!\n\n// Set up Redux/Router\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\n// Import reducer/index.js as root reducer, it's where we're combining all our reducer files\nimport rootReducer from './store/reducers';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nconst LoadingIndicator = () => {\n\n    const { promiseInProgress } = usePromiseTracker();\n    return (\n        promiseInProgress &&\n        <div\n            style={{\n                width: \"100%\",\n                height: \"100vh\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                background: 'rgba(0, 0, 0, .2)',\n                zIndex: 10,\n            }}\n        >\n            <Loader type=\"Bars\" color={\"#343a40\"} height={80} width={100}/>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n            <LoadingIndicator/>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();\n"],"sourceRoot":""}