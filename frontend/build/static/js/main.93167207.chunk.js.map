{"version":3,"sources":["helpers/auth-header.js","helpers/handle-response.js","helpers/history.js","constants.js","services/authentication.service.js","services/operator.service.js","services/design.service.js","services/operation.service.js","components/GarmentSawing/Operator/AddOperator.js","components/GarmentSawing/Operator/EditOperator.js","img/deez-logo.png","services/settings.service.js","components/GarmentSawing/Operator/ViewOperator.js","components/GarmentSawing/Design/AddDesign.js","components/GarmentSawing/Design/EditDesign.js","components/GarmentSawing/Design/ViewDesign.js","components/GarmentSawing/Operation/AddOperation.js","components/GarmentSawing/Operation/ViewOperation.js","components/GarmentSawing/Operator/OperatorOperations.js","components/SignIn/SignIn.js","helpers/PrivateRote.js","App.js","store/actions/counter.js","store/reducers/counter.js","store/reducers/index.js","reportWebVitals.js","index.js"],"names":["authHeader","currentUser","authenticationService","currentUserValue","token","handleResponse","response","text","then","data","JSON","parse","ok","indexOf","status","logout","error","message","statusText","toast","notify","Promise","reject","history","createBrowserHistory","apiUrl","currentUserSubject","BehaviorSubject","localStorage","getItem","login","email","password","requestOptions","method","headers","body","stringify","fetch","user","loadUserData","setItem","next","replace","removeItem","asObservable","value","operatorService","getOperatorWithOperations","today","Date","startMonth","setMonth","getMonth","startDate","getFullYear","console","log","toUTCString","getOperators","addOperator","editOperator","id","updateOperatorSteps","deleteOperator","fetchDesigns","addOperatorOperations","designService","getAllDesigns","type","getLastTwoMonthsAllDesigns","getAllDesignsWithOperator","getAllIncompleteDesignsWithOperator","getIncompleteDesignsWithOperations","addDesign","deleteDesign","editDesign","operationService","addOperations","updateOperations","addAllOperations","AddOperator","props","notifyError","notifySuccess","msg","success","handleSubmit","event","currentTarget","checkValidity","setState","validated","isLoading","trackPromise","state","form","name","fullName","team","isQC","nationalId","bankAccount","bank","distance","preventDefault","stopPropagation","handleInputChange","target","checked","resignDate","bind","Container","Form","noValidate","this","onSubmit","Group","as","Row","className","Label","column","sm","Col","Control","onChange","required","defaultValue","Check","label","Button","disabled","variant","React","Component","EditOperator","ind","selectedOperator","lodash","cloneDeep","operators","modal","showEditModal","title","removeOperator","showConfirmation","confirmEdit","Object","fromEntries","entries","filter","handleClose","confirmDelete","splice","showSuccess","handleDateChange","subscribe","x","Table","striped","bordered","hover","size","width","map","operator","onClick","icon","faEdit","Modal","show","onHide","centered","Header","closeButton","Title","Body","isResigned","Footer","settingsService","getAll","updateAll","ViewOperator","formattedData","calculateTimeToComplete","designs","fetchOperators","fetchSettings","settings","date","thisMonthStartDate","lastMonthStartDate","thisMonthCompletedCount","thisMonthCLCompletedCount","thisMonthNLMCompletedCount","lastMonthCompletedCount","lastMonthCLCompletedCount","lastMonthNLMCompletedCount","selectedDesign","i","operationTimes","operationTimesCL","operationTimesNLM","thisMonthCompletedTime","thisMonthCLCompletedTime","thisMonthNLMCompletedTime","lastMonthCompletedTime","lastMonthCLCompletedTime","lastMonthNLMCompletedTime","steps","operation","estimatedTime","brand","operatorSteps","operatorStep","completeTime","quantity","totalTime","sewingValueForSecond","sewingValue","parseInt","getDate","yesterday","moment","add","tomorrow","setDate","subtract","endOf","helpersCount","todayTimeAndSalary","calculateSalary","todaySalary","totalSalary","todayTime","todayCompleteCount","totalCompleteCount","yesterdayTimeAndSalary","yesterdaySalary","yesterdayTime","yesterdayCompleteCount","yesterdayCLCompleteCount","totalCLCompleteCount","yesterdayNLMCompleteCount","totalNLMCompleteCount","thisMonthTimeAndSalary","thisMonthTime","thisMonthSalary","thisMonthCompleteCount","thisMonthCLCompleteCount","thisMonthNLMCompleteCount","lastMonthTimeAndSalary","lastMonthTime","lastMonthSalary","lastMonthCompleteCount","lastMonthCLCompleteCount","lastMonthNLMCompleteCount","lastMonthMBCompleteCount","totalMBCompleteCount","thisMonthWRKDays","calculateWorkDays","lastMonthWRKDays","extraPayments","percentage","calculatePercentage","todayPercentage","Math","round","totalTodayTime","thisMonthPercentage","totalThisMonthTime","lastMonthPercentage","totalLastMonthTime","calculateBonus","addOperatorInfo","orderBy","viewSalarySheetModal","prevState","showSalaryModal","showInfoModal","sortOperator","updateOperatorStep","key","updatedQuantity","editable","view","operatorType","days","qcPrice","perKMPrice","maxTransportAmount","isTransportEnable","bestOperatorThisMonth","bestOperatorLastMonth","lastMonthBonus","thisMonthBonus","performancePlaceLastMonth","ordinal_suffix_of","j","k","floor","salary","toFixed","start","end","monthOperatorSteps","push","monthWRKDays","groupBy","b","format","keys","length","design","find","step","designId","alert","salaryFormatter","duration","transport","extraPaymentTotal","extraPayment","val","calculateExtraPayments","calculateTransport","index","includes","slice","reverse","window","print","ButtonGroup","faPrint","months","timeFormatter","viewOperatorInfo","faInfo","day","calculateDaily","scrollable","Accordion","defaultActiveKey","Item","eventKey","isLast","description","e","faUpload","borderless","colSpan","alt","src","logo","style","op","payment","calculateTotalSalary","AddDesign","getSawingValueDefault","handleDesignTypeChange","handleBrandChange","startTime","isComplete","controlId","EditDesign","editComplete","ViewDesign","removeDesign","duplicateDesign","_","forEach","showDuplicateModal","confirmDesignDuplicate","duplicateOperations","viewDesignInfo","calculateTotalTimeToComplete","calculateCompletedTime","totalCompletedTime","totalTimeToComplete","time","operationCompletedCount","completedCount","showOperationInfoModal","filterData","keyword","toLowerCase","filteredData","filteredDesign","viewOperationInfo","selectedOperation","prevProps","snapshot","faCopy","roles","faTrash","md","AddOperation","handleAddOperation","values","unshift","handleRemoveOperation","isInDb","handleUpdateOperation","isChange","handleCreateOperation","handleDesignChange","operations","handleTimer","timerModal","selectedOperationIndex","userTimer","createRef","undefined","inputField","xs","faClock","faPlus","ref","initialTime","startImmediately","resume","pause","stop","reset","Fragment","Minutes","Seconds","current","getTime","ViewOperation","OperatorOperations","completedTime","completedQuantity","operatorId","stepId","position","minHeight","SignIn","useState","setEmail","setPassword","navigate","useNavigate","height","placeholder","PrivateRoute","children","to","configure","autoClose","App","onLogOut","allowedRole","Navbar","bg","sticky","expand","collapseOnSelect","fluid","Brand","Toggle","Collapse","Nav","NavDropdown","Link","username","path","element","INCREMENT","DECREMENT","initialState","count","combineReducers","counter","action","payload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","applyMiddleware","thunk","logger","LoadingIndicator","usePromiseTracker","promiseInProgress","display","justifyContent","alignItems","top","left","background","zIndex","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93167207.chunk.js","sourcesContent":["import { authenticationService } from '../services';\n\nexport function authHeader() {\n    // return authorization header with jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.token) {\n        return {\n            'Authorization': `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n        };\n    } else {\n        return {\n            'Content-Type': 'application/json',\n        };\n    }\n}","import { authenticationService } from '../services';\nimport {toast} from \"react-toastify\";\n\nexport function handleResponse(response) {\n\n    const notify = (error) => toast.error(error);\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if ([401, 403].indexOf(response.status) !== -1) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                authenticationService.logout();\n            }\n\n            const error = (data && data.error && data.error.message) || response.statusText;\n            notify(error);\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export const apiUrl = 'http://deez.lk/api';\n// export const apiUrl = 'http://localhost:5000/api';\n// export const apiUrl = '/api';\n","import { BehaviorSubject } from 'rxjs';\n\nimport {handleResponse, history} from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue () { return currentUserSubject.value }\n};\n\nfunction login(email, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password })\n    };\n\n    return fetch(`${apiUrl}/users/login`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            return loadUserData(user.token).then( user => {\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                currentUserSubject.next(user);\n                return user;\n                }\n            );\n        });\n}\n\nfunction loadUserData(token) {\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n    };\n\n    return fetch(`${apiUrl}/whoAmI`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            user = {...user, token};\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    history.replace('/sign-in');\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const operatorService = {\n    getOperatorWithOperations,\n    getOperators,\n    addOperator,\n    editOperator,\n    updateOperatorSteps,\n    deleteOperator,\n    fetchDesigns,\n    addOperatorOperations,\n};\n\nfunction getOperatorWithOperations() {\n    let today = new Date();\n    let startMonth = new Date(today);\n    startMonth.setMonth(startMonth.getMonth() - 1);\n    let startDate = new Date(startMonth.getFullYear(), startMonth.getMonth(), 1);\n    console.log(startDate.toUTCString());\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/operators?filter=\n  {\n    \"where\":{\"isResigned\": false},\n    \"include\": [\n      {\n        \"relation\": \"operatorSteps\",\n        \"scope\": {\n          \"where\": {\n            \"completeTime\": {\n              \"gte\": [\n                \"${startDate.toUTCString()}\"\n              ]\n            }\n          },\n          \"order\": [\n            \"id desc\"\n          ],\n          \"fields\": {\n            \"id\": \"true\",\n            \"stepId\": \"true\",\n            \"operatorId\": \"true\",\n            \"completeTime\": \"true\",\n            \"quantity\": \"true\"\n          },\n          \"include\": [\n            {\n              \"relation\": \"step\",\n              \"scope\": {\n                \"fields\": {\n                  \"id\": \"true\",\n                  \"name\": \"true\",\n                  \"estimatedTime\": \"true\",\n                  \"designId\": \"true\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }`,\n        requestOptions).then(handleResponse);\n}\n\nfunction getOperators() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/operators`,\n        requestOptions).then(handleResponse);\n}\n\nfunction addOperator(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operators`, requestOptions).then(handleResponse);\n}\n\nfunction editOperator(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operators/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction updateOperatorSteps(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data), };\n    return fetch(`${apiUrl}/operator-steps/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction deleteOperator(id) {\n    const requestOptions = { method: 'DELETE', headers: authHeader() };\n    return fetch(`${apiUrl}/operators/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction fetchDesigns() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\"}]}`, requestOptions).then(handleResponse);\n}\n\nfunction addOperatorOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/operator-steps`, requestOptions).then(handleResponse);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const designService = {\n    getAllDesigns,\n    getLastTwoMonthsAllDesigns,\n    getAllDesignsWithOperator,\n    getAllIncompleteDesignsWithOperator,\n    getIncompleteDesignsWithOperations,\n    addDesign,\n    deleteDesign,\n    editDesign,\n};\n\nfunction getAllDesigns(type) {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={${type === 'incomplete'? '\"where\":{\"isComplete\": false},' : type === 'complete'? '\"where\":{\"isComplete\": true},' : '' }\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"order\": [\"id desc\"], \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getLastTwoMonthsAllDesigns() {\n    let today = new Date();\n    let startMonth = new Date(today);\n    startMonth.setMonth(startMonth.getMonth() - 3);\n    let startDate = new Date(startMonth.getFullYear(), startMonth.getMonth(), 1);\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\n          \"where\": {\n            \"startTime\": {\n              \"gte\": [\n                \"${startDate.toUTCString()}\"\n              ]\n            }\n          },\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\",\n        \"scope\": {\n          \"fields\": {\n            \"id\": \"true\",\n            \"estimatedTime\": \"true\",\n            \"designId\": \"true\"\n          },\n          \"include\": [{\"relation\": \"operatorSteps\", \"order\": [\"id desc\"]}]\n        }}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getAllDesignsWithOperator() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getAllIncompleteDesignsWithOperator() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\", \"scope\":{\"include\": [{\"relation\": \"operatorSteps\", \"scope\":{\"include\": [{\"relation\": \"operator\"}]}}]}}]}`, requestOptions).then(handleResponse);\n}\n\nfunction getIncompleteDesignsWithOperations() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/designs?filter={\"where\":{\"isComplete\": false},\"order\": [\"id desc\"],\"include\": [{\"relation\": \"steps\"}]}`, requestOptions).then(handleResponse);\n}\n\nfunction addDesign(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/designs`, requestOptions).then(handleResponse);\n}\n\nfunction deleteDesign(id) {\n    const requestOptions = { method: 'DELETE', headers: authHeader() };\n    return fetch(`${apiUrl}/designs/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction editDesign(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/designs/${id}`, requestOptions).then(handleResponse);\n}\n","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const operationService = {\n    addOperations,\n    updateOperations,\n    addAllOperations,\n};\n\nfunction addOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps`, requestOptions).then(handleResponse);\n}\n\nfunction updateOperations(id, data) {\n    const requestOptions = { method: 'PUT', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction addAllOperations(data) {\n    const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/steps-multi`, requestOptions).then(handleResponse);\n}","import React from \"react\";\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {operatorService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddOperator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                fullName: '',\n                team: '1',\n                type: '1',\n                isQC: false,\n                nationalId: '',\n                bankAccount: '',\n                bank: '',\n                distance: '',\n                startDate: new Date(),\n                resignDate: '',\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n                operatorService.addOperator(this.state.form).then(\n                    data => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: '',\n                                fullName: '',\n                                team: '1',\n                                type: '1',\n                                isQC: false,\n                                nationalId: '',\n                                bankAccount: '',\n                                bank: '',\n                                distance: '',\n                            }\n                        });\n                        this.notifySuccess(`Operator \"${data.name}\" added successfully`);\n\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h2>Add Operator</h2>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} className=\"mb-3\" id=\"name\">\n                        <Form.Label column sm=\"4\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"fullName\">\n                        <Form.Label column sm=\"4\">\n                            Full Name (with initials)\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'fullName'} value={this.state.form.fullName}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"team\">\n                        <Form.Label column sm=\"4\">\n                            Team\n                        </Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control name={'team'} as=\"select\" defaultValue={this.state.form.team}\n                                          onChange={this.handleInputChange}>\n                                <option value={'1'}>1</option>\n                                <option value={'2'}>2</option>\n                                <option value={'3'}>3</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"type\">\n                        <Form.Label column sm=\"4\">Select Operator Type</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control as=\"select\" name={'type'} defaultValue={this.state.form.type}\n                                          onChange={this.handleInputChange}>\n                                <option value=\"1\">Machine Operator</option>\n                                <option value=\"2\">Helper</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    {this.state.form.type === '2' &&\n                    <Form.Group as={Row} id=\"type\">\n                        <Form.Label column sm=\"4\">Is QC?</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Check name={'isQC'} type=\"checkbox\" label=\"\"\n                                        checked={this.state.form.isQC} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n                    }\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"nationalId\">\n                        <Form.Label column sm=\"4\">National Id</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'nationalId'} value={this.state.form.nationalId}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"bank\">\n                        <Form.Label column sm=\"4\">Bank Name</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'bank'} value={this.state.form.bank}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"bankAccount\">\n                        <Form.Label column sm=\"4\">Bank Account Number</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'bankAccount'} value={this.state.form.bankAccount}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" id=\"distance\">\n                        <Form.Label column sm=\"4\">Distance (KM)</Form.Label>\n                        <Col sm=\"8\">\n                            <Form.Control type=\"text\" name={'distance'} value={this.state.form.distance}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Button type=\"submit\" className=\"mt-3\" disabled={this.state.isLoading}\n                            variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Add Operator'}</Button>\n                </Form>\n\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEdit, faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport lodash from \"lodash\"\nimport {authenticationService, operatorService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport DatePicker from 'react-date-picker';\n\n\nexport default class EditOperator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            operators: [],\n            modal: {\n                showConfirmation: false,\n                showSuccess: false,\n                showEditModal: false,\n                title: '',\n                body: ''\n            },\n            selectedOperator: {},\n            isLoading: false\n        };\n    }\n\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    componentDidMount() {\n\n        authenticationService.currentUser.subscribe(x => this.setState({\n            currentUser: x,\n        }));\n        trackPromise(\n            operatorService.getOperators()\n                .then(\n                    data => {\n                        const operators = data || [];\n                        this.setState({\n                            // this.setState({\n                            operators: operators\n                        });\n                    },\n                    error => {\n                        this.setState({msg: error});\n                        console.error('Error:', error);\n                    }\n                ));\n    }\n\n    editOperator = (id, ind) => {\n        let selectedOperator = lodash.cloneDeep(this.state.operators[ind]);\n        selectedOperator.ind = ind;\n        this.setState({\n            selectedOperator: selectedOperator,\n            modal: {\n                ...this.state.modal,\n                showEditModal: true,\n                title: `Edit Operator ${selectedOperator.name}`\n            }\n        })\n    }\n\n    removeOperator = (id, ind) => {\n        let selectedOperator = this.state.operators[ind];\n        this.setState({\n            selectedOperator: selectedOperator,\n            modal: {\n                ...this.state.modal,\n                showConfirmation: true,\n                title: `Remove Operator ${selectedOperator.name}`,\n                body: 'Are you sure ?'\n            }\n        })\n    }\n\n    confirmEdit = () => {\n        this.setState({isLoading: true});\n        let data = lodash.cloneDeep(Object.fromEntries(Object.entries(this.state.selectedOperator).filter(([_, v]) => v != null)));\n        delete data.ind;\n        trackPromise(\n            operatorService.editOperator(this.state.selectedOperator.id, data)\n                .then(\n                    data => {\n                        let operators = this.state.operators;\n                        let ind = this.state.selectedOperator.ind;\n                        console.log('here', ind);\n                        operators[ind] = this.state.selectedOperator;\n                        this.setState({\n                            operators: operators,\n                            isLoading: false,\n                        });\n                        this.handleClose();\n                        this.notifySuccess(`${this.state.selectedOperator.name} successfully edited`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    confirmDelete = () => {\n        this.setState({isLoading: true});\n        trackPromise(\n            operatorService.deleteOperator(this.state.selectedOperator.id)\n                .then(\n                    () => {\n                        let operators = this.state.operators;\n                        let ind = operators.indexOf(this.state.selectedOperator);\n                        operators.splice(ind, 1);\n                        this.setState({\n                            operators: operators,\n                            isLoading: false,\n                        });\n                        this.handleClose();\n                        this.notifySuccess(`${this.state.selectedOperator.name} successfully deleted`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showConfirmation: false,\n                showSuccess: false,\n                showEditModal: false,\n            }\n        });\n    }\n\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            selectedOperator: {\n                ...this.state.selectedOperator,\n                [name]: value\n            }\n        });\n    }\n\n    handleDateChange = (event) => {\n        const name = 'resignDate';\n\n        this.setState({\n            selectedOperator: {\n                ...this.state.selectedOperator,\n                [name]: event\n            }\n        });\n    }\n\n\n    render() {\n        return (\n            <Container>\n                <br/>\n                <h2>Edit Operators</h2>\n                <br/>\n                <Row>\n                    <Table striped bordered hover size=\"sm\">\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Team</th>\n                            <th width={90}></th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.operators && this.state.operators.map((operator, ind) => {\n                            return (\n                                <tr key={ind}>\n                                    <td>{operator.name}</td>\n                                    <td>{operator.team}</td>\n                                    <td className={'text-center'}>\n                                        <Button variant={\"outline-primary\"}\n                                                onClick={() => this.editOperator(operator.id, ind)}\n                                                size={\"sm\"}>\n                                            <FontAwesomeIcon icon={faEdit}/>\n                                        </Button>\n                                        &nbsp;\n\n                                        {/*{this.state.currentUser && this.state.currentUser.roles.includes('admin') &&*/}\n                                        {/*<Button variant={\"danger\"} onClick={() => this.removeOperator(operator.id, ind)}*/}\n                                        {/*        size={\"sm\"}>*/}\n                                        {/*    <FontAwesomeIcon icon={faTrash}/>*/}\n                                        {/*</Button>*/}\n                                        {/*}*/}\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Modal show={this.state.modal.showEditModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <Form noValidate validated={this.state.validated}>\n                                <Form.Group as={Row} className=\"mb-3\" id=\"name\">\n                                    <Form.Label column sm=\"4\">\n                                        Name\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'name'}\n                                                      defaultValue={this.state.selectedOperator.name}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"fullName\">\n                                    <Form.Label column sm=\"4\">\n                                        Full Name (with initials)\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'fullName'} value={this.state.selectedOperator.fullName}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"team\">\n                                    <Form.Label column sm=\"4\">\n                                        Team\n                                    </Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control name={'team'} as=\"select\"\n                                                      defaultValue={this.state.selectedOperator.team}\n                                                      onChange={this.handleInputChange}>\n                                            <option value={'1'}>1</option>\n                                            <option value={'2'}>2</option>\n                                            <option value={'3'}>3</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"type\">\n                                    <Form.Label column sm=\"4\">Select Operator Type</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control as=\"select\" name={'type'}\n                                                      defaultValue={this.state.selectedOperator.type}\n                                                      onChange={this.handleInputChange}>\n                                            <option value=\"1\">Machine Operator</option>\n                                            <option value=\"2\">Helper</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                {this.state.selectedOperator.type === '2' &&\n                                <Form.Group as={Row} className=\"mb-3\" id=\"isQC\">\n                                    <Form.Label column sm=\"4\">Is QC?</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Check name={'isQC'} type=\"checkbox\" label=\"\"\n                                                    checked={this.state.selectedOperator.isQC}\n                                                    onChange={this.handleInputChange}/>\n                                    </Col>\n                                </Form.Group>\n                                }\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"nationalId\">\n                                    <Form.Label column sm=\"4\">National Id</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'nationalId'} value={this.state.selectedOperator.nationalId}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"bank\">\n                                    <Form.Label column sm=\"4\">Bank Name</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'bank'} value={this.state.selectedOperator.bank}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"bankAccount\">\n                                    <Form.Label column sm=\"4\">Bank Account Number</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"text\" name={'bankAccount'} value={this.state.selectedOperator.bankAccount}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"distance\">\n                                    <Form.Label column sm=\"4\">Distance (KM)</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Control type=\"number\" name={'distance'} value={this.state.selectedOperator.distance}\n                                                      onChange={this.handleInputChange} required/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} className=\"mb-3\" id=\"isResigned\">\n                                    <Form.Label column sm=\"4\">Is Resigned?</Form.Label>\n                                    <Col sm=\"8\">\n                                        <Form.Check name={'isResigned'} type=\"checkbox\" label=\"\"\n                                                    checked={this.state.selectedOperator.isResigned}\n                                                    onChange={this.handleInputChange}/>\n                                    </Col>\n                                </Form.Group>\n\n                                {this.state.selectedOperator.isResigned &&\n                                <Form.Group as={Row} className=\"mb-3\" id=\"resignDate\">\n                                    <Form.Label column sm=\"4\">Resigned Date</Form.Label>\n                                    <Col sm=\"8\">\n                                        <DatePicker name={'resignDate'} onChange={this.handleDateChange} value={this.state.selectedOperator.resignDate} />\n                                    </Col>\n                                </Form.Group>\n                                }\n\n                            </Form>\n                        </Container>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmEdit}>\n                            {this.state.isLoading ? 'Loading' : 'Edit'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showConfirmation} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmDelete}>\n                            {this.state.isLoading ? 'Loading' : 'Confirm'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/deez-logo.de9bcd45.png\";","import { authHeader, handleResponse } from '../helpers';\nimport {apiUrl} from \"../constants\";\n\nexport const settingsService = {\n    getAll,\n    updateAll\n};\n\nfunction getAll() {\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch(`${apiUrl}/settings`, requestOptions).then(handleResponse);\n}\n\nfunction updateAll(id, data) {\n    const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(data) };\n    return fetch(`${apiUrl}/settings/${id}`, requestOptions).then(handleResponse);\n}","import React from 'react';\nimport {Accordion, Button, ButtonGroup, Container, Modal, Row, Table} from 'react-bootstrap';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEdit, faInfo, faPrint, faUpload} from '@fortawesome/free-solid-svg-icons';\nimport lodash from 'lodash';\nimport {designService, operatorService} from '../../../services';\nimport {trackPromise} from 'react-promise-tracker';\nimport logo from '../../../img/deez-logo.png';\nimport {settingsService} from '../../../services/settings.service';\n\nexport default class ViewOperator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      operators: [],\n      helpersCount: 0,\n      designs: [],\n      view: 'monthly',\n      operatorType: 'operator',\n      days: [],\n      selectedOperator: {},\n      thisMonthCompletedCount: 0,\n      thisMonthCLCompletedCount: 0,\n      thisMonthNLMCompletedCount: 0,\n      lastMonthCompletedCount: 0,\n      lastMonthCLCompletedCount: 0,\n      lastMonthNLMCompletedCount: 0,\n      modal: {\n        showInfoModal: false,\n        showSalaryModal: false,\n      },\n      settings: {\n        qcPrice: 0,\n        perKMPrice: 0,\n        maxTransportAmount: 0,\n        isTransportEnable: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchDesigns();\n    this.fetchSettings();\n  }\n\n  fetchDesigns = () => {\n    trackPromise(\n      designService.getLastTwoMonthsAllDesigns().then(\n        data => {\n          let formattedData = this.calculateTimeToComplete(data);\n          this.setState({\n            designs: formattedData,\n          });\n          this.fetchOperators();\n        },\n        error => {\n          this.setState({msg: error});\n          console.error('Error:', error);\n        },\n      ));\n  };\n\n  fetchSettings = () => {\n    trackPromise(\n      settingsService.getAll().then(\n        data => {\n          this.setState({\n            settings: data[0],\n          });\n        },\n        error => {\n          this.setState({msg: error});\n          console.error('Error:', error);\n        },\n      ));\n  };\n\n  calculateTimeToComplete = (data) => {\n    let date = new Date();\n    let thisMonthStartDate = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0);\n    let lastMonthStartDate = new Date(date.getFullYear(), date.getMonth() - 1, 1, 0, 0, 0);\n    let thisMonthCompletedCount = 0;\n    let thisMonthCLCompletedCount = 0;\n    let thisMonthNLMCompletedCount = 0;\n    let lastMonthCompletedCount = 0;\n    let lastMonthCLCompletedCount = 0;\n    let lastMonthNLMCompletedCount = 0;\n    data.map((selectedDesign, i) => {\n      let operationTimes = 0;\n      let operationTimesCL = 0;\n      let operationTimesNLM = 0;\n      let thisMonthCompletedTime = 0;\n      let thisMonthCLCompletedTime = 0;\n      let thisMonthNLMCompletedTime = 0;\n      let lastMonthCompletedTime = 0;\n      let lastMonthCLCompletedTime = 0;\n      let lastMonthNLMCompletedTime = 0;\n      selectedDesign.steps && selectedDesign.steps.map((operation, ind) => {\n        operationTimes += operation.estimatedTime;\n        if (selectedDesign.brand === 'cleopatra') {\n          operationTimesCL += operation.estimatedTime;\n        }\n        if (selectedDesign.brand === 'nolimit') {\n          operationTimesNLM += operation.estimatedTime;\n        }\n        if (selectedDesign.type === 2) {\n          return false;\n        }\n        operation.operatorSteps && operation.operatorSteps.map((operatorStep, ind) => {\n          if (new Date(operatorStep.completeTime) > new Date(thisMonthStartDate)) {\n            thisMonthCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            if (selectedDesign.brand === 'cleopatra') {\n              thisMonthCLCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            }\n            if (selectedDesign.brand === 'nolimit') {\n              thisMonthNLMCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            }\n          } else if (new Date(operatorStep.completeTime) > new Date(lastMonthStartDate)) {\n            lastMonthCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            if (selectedDesign.brand === 'cleopatra') {\n              lastMonthCLCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            }\n            if (selectedDesign.brand === 'nolimit') {\n              lastMonthNLMCompletedTime += operation.estimatedTime * operatorStep.quantity;\n            }\n          }\n          return operatorStep;\n        });\n        return operationTimes;\n      });\n      thisMonthCompletedCount += thisMonthCompletedTime / operationTimes || 0;\n      thisMonthCLCompletedCount += thisMonthCLCompletedTime / operationTimesCL || 0;\n      thisMonthNLMCompletedCount += thisMonthNLMCompletedTime / operationTimesNLM || 0;\n      lastMonthCompletedCount += lastMonthCompletedTime / operationTimes || 0;\n      lastMonthCLCompletedCount += lastMonthCLCompletedTime / operationTimesCL || 0;\n      lastMonthNLMCompletedCount += lastMonthNLMCompletedTime / operationTimesNLM || 0;\n      selectedDesign.totalTime = operationTimes;\n      selectedDesign.sewingValueForSecond = (selectedDesign.sewingValue ? selectedDesign.sewingValue : 0) / operationTimes;\n      return selectedDesign;\n    });\n    console.log(thisMonthCompletedCount, lastMonthCompletedCount);\n    this.setState({\n      thisMonthCompletedCount: parseInt(thisMonthCompletedCount),\n      thisMonthCLCompletedCount: parseInt(thisMonthCLCompletedCount),\n      thisMonthNLMCompletedCount: parseInt(thisMonthNLMCompletedCount),\n      lastMonthCompletedCount: parseInt(lastMonthCompletedCount),\n      lastMonthCLCompletedCount: parseInt(lastMonthCLCompletedCount),\n      lastMonthNLMCompletedCount: parseInt(lastMonthNLMCompletedCount),\n    });\n    return data;\n  };\n\n  fetchOperators = () => {\n    trackPromise(\n      operatorService.getOperatorWithOperations()\n        .then(\n          data => {\n            let date = new Date();\n            let today = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n            let yesterday = moment(today).add(-1, 'days');\n            let tomorrow = new Date(date.setDate(today.getDate() + 1));\n            let thisMonthStartDate = moment(new Date()).subtract(1, 'months').endOf('month');\n            let lastMonthStartDate = moment(new Date()).subtract(2, 'months').endOf('month');\n            let helpersCount = 0;\n            data.map((operator, ind) => {\n              if(operator.type === 2){\n                helpersCount++;\n              }\n              let todayTimeAndSalary = this.calculateSalary(operator, today, tomorrow);\n              operator.todaySalary = todayTimeAndSalary.totalSalary;\n              operator.todayTime = todayTimeAndSalary.totalTime;\n              operator.todayCompleteCount = todayTimeAndSalary.totalCompleteCount;\n\n              let yesterdayTimeAndSalary = this.calculateSalary(operator, yesterday, today);\n              operator.yesterdaySalary = yesterdayTimeAndSalary.totalSalary;\n              operator.yesterdayTime = yesterdayTimeAndSalary.totalTime;\n              operator.yesterdayCompleteCount = yesterdayTimeAndSalary.totalCompleteCount;\n              operator.yesterdayCLCompleteCount = yesterdayTimeAndSalary.totalCLCompleteCount;\n              operator.yesterdayNLMCompleteCount = yesterdayTimeAndSalary.totalNLMCompleteCount;\n\n              let thisMonthTimeAndSalary = this.calculateSalary(operator, thisMonthStartDate, tomorrow);\n              operator.thisMonthTime = thisMonthTimeAndSalary.totalTime;\n              operator.thisMonthSalary = thisMonthTimeAndSalary.totalSalary;\n              operator.thisMonthCompleteCount = thisMonthTimeAndSalary.totalCompleteCount;\n              operator.thisMonthCLCompleteCount = thisMonthTimeAndSalary.totalCLCompleteCount;\n              operator.thisMonthNLMCompleteCount = thisMonthTimeAndSalary.totalNLMCompleteCount;\n\n              let lastMonthTimeAndSalary = this.calculateSalary(operator, lastMonthStartDate, thisMonthStartDate);\n              operator.lastMonthTime = lastMonthTimeAndSalary.totalTime;\n              operator.lastMonthSalary = lastMonthTimeAndSalary.totalSalary;\n              operator.lastMonthCompleteCount = lastMonthTimeAndSalary.totalCompleteCount;\n              operator.lastMonthCLCompleteCount = lastMonthTimeAndSalary.totalCLCompleteCount;\n              operator.lastMonthNLMCompleteCount = lastMonthTimeAndSalary.totalNLMCompleteCount;\n              operator.lastMonthMBCompleteCount = lastMonthTimeAndSalary.totalMBCompleteCount;\n\n              operator.thisMonthWRKDays = this.calculateWorkDays(operator, thisMonthStartDate, tomorrow);\n              operator.lastMonthWRKDays = this.calculateWorkDays(operator, lastMonthStartDate, thisMonthStartDate);\n              operator.extraPayments = [];\n              return operator;\n            });\n            const percentage = this.calculatePercentage(data);\n            data.map((operator, ind) => {\n              operator.todayPercentage = operator.todayTime === 0 ? 0 : Math.round((operator.todayTime / percentage.totalTodayTime) * 10000) / 100;\n              operator.thisMonthPercentage = operator.thisMonthTime === 0 ? 0 : Math.round((operator.thisMonthTime / percentage.totalThisMonthTime) * 10000) / 100;\n              operator.lastMonthPercentage = operator.lastMonthTime === 0 ? 0 : Math.round((operator.lastMonthTime / percentage.totalLastMonthTime) * 10000) / 100;\n              return operator;\n            });\n            this.calculateBonus(data);\n            this.addOperatorInfo(data);\n            data = lodash.orderBy(data, ['todayTime', 'yesterdayTime'], ['desc', 'desc']);\n            this.setState({\n              operators: data,\n              helpersCount: helpersCount,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  };\n\n  calculateBonus(data) {\n    let bestOperatorThisMonth = lodash.orderBy(data, ['thisMonthTime'], ['desc']);\n    let bestOperatorLastMonth = lodash.orderBy(data, ['lastMonthTime'], ['desc']);\n    bestOperatorThisMonth.map((operator, ind) => {\n      if (operator.type !== '1') {\n        operator.lastMonthBonus = 0;\n        return false;\n      }\n      if (ind === 0) {\n        operator.thisMonthBonus = 3000;\n      } else if (ind === 1) {\n        operator.thisMonthBonus = 2000;\n      } else if (ind === 2) {\n        operator.thisMonthBonus = 1000;\n      } else if (ind === 3) {\n        operator.thisMonthBonus = 500;\n      } else {\n        operator.thisMonthBonus = 0;\n      }\n      return operator;\n    });\n    bestOperatorLastMonth.map((operator, ind) => {\n      if (operator.type !== '1') {\n        operator.lastMonthBonus = 0;\n        return false;\n      }\n      if (ind === 0) {\n        operator.lastMonthBonus = 3000;\n      } else if (ind === 1) {\n        operator.lastMonthBonus = 2000;\n      } else if (ind === 2) {\n        operator.lastMonthBonus = 1000;\n      } else if (ind === 3) {\n        operator.lastMonthBonus = 500;\n      } else {\n        operator.lastMonthBonus = 0;\n      }\n      operator.performancePlaceLastMonth = this.ordinal_suffix_of(ind + 1);\n      return operator;\n    });\n  }\n\n  ordinal_suffix_of(i) {\n    let j = i % 10,\n      k = i % 100;\n    if (j === 1 && k !== 11) {\n      return i + 'st';\n    }\n    if (j === 2 && k !== 12) {\n      return i + 'nd';\n    }\n    if (j === 3 && k !== 13) {\n      return i + 'rd';\n    }\n    return i + 'th';\n  }\n\n  calculatePercentage(data) {\n    let totalLastMonthTime = 0;\n    let totalThisMonthTime = 0;\n    let totalTodayTime = 0;\n    data && data.map((operator, ind) => {\n      if (operator.type !== '1') {\n        return false;\n      }\n      totalLastMonthTime += operator.lastMonthTime;\n      totalThisMonthTime += operator.thisMonthTime;\n      totalTodayTime += operator.todayTime;\n      return operator;\n    });\n    return {totalLastMonthTime, totalThisMonthTime, totalTodayTime};\n  }\n\n  timeFormatter(totalTime) {\n    // return moment.duration(totalTime, 'seconds').format(\"d [d] hh [h] mm [min]\")\n    return (Math.floor(totalTime / 60 / 60 / 8) > 0 ? Math.floor(totalTime / 60 / 60 / 8) + ' days  ' : '') +\n      (Math.floor(totalTime / 60 / 60 % 8) > 0 ? Math.floor(totalTime / 60 / 60 % 8) + ' hrs  ' : '') +\n      (Math.floor(totalTime / 60 % 60) > 0 ? Math.floor(totalTime / 60 % 60) + ' mins  ' : '') +\n      totalTime % 60 + ' secs';\n  }\n\n  salaryFormatter(salary) {\n    return (\n      <span className={'salary-format'}>Rs. <span>{salary ? salary.toFixed(2) : 0}</span></span>\n    );\n  }\n\n  calculateWorkDays(operator, start, end) {\n    let monthOperatorSteps = [];\n    operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n      if (new Date(start) > new Date(operatorStep.completeTime) || new Date(operatorStep.completeTime) > new Date(end)) {\n        return operatorStep;\n      }\n      return monthOperatorSteps.push(operatorStep);\n    });\n    let monthWRKDays = lodash.groupBy(monthOperatorSteps, function(b) {\n      return moment(b.completeTime).format('YYYY-MM-DD');\n    });\n    return Object.keys(monthWRKDays).length;\n  }\n\n  calculateSalary(operator, start, end) {\n    let totalTime = 0;\n    let totalCompleteCount = 0;\n    let totalCLCompleteCount = 0;\n    let totalNLMCompleteCount = 0;\n    let totalMBCompleteCount = 0;\n    let totalSalary = 0;\n    operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n      if (new Date(start) > new Date(operatorStep.completeTime) || new Date(operatorStep.completeTime) > new Date(end)) {\n        return totalTime;\n      }\n      let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n      if (!design) {\n        alert('Design with id - ' + operatorStep.step.designId + ' not found');\n      }\n      totalTime += operatorStep.step.estimatedTime * operatorStep.quantity;\n      totalCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      if (design.brand === 'cleopatra') {\n        totalCLCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      }\n      if (design.brand === 'nolimit') {\n        totalNLMCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      }\n      if (design.brand === 'modabella') {\n        totalMBCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      }\n      totalSalary += operatorStep.step.estimatedTime * operatorStep.quantity * design.sewingValueForSecond;\n      return operatorStep;\n    });\n    return {totalTime, totalSalary, totalCompleteCount, totalCLCompleteCount, totalNLMCompleteCount, totalMBCompleteCount};\n  }\n\n  calculateDaily(operatorSteps) {\n\n    let totalTime = 0;\n    let totalCompleteCount = 0;\n    let totalSalary = 0;\n    operatorSteps && operatorSteps.map((operatorStep, ind) => {\n      let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n      totalTime += operatorStep.step.estimatedTime * operatorStep.quantity;\n      totalCompleteCount += operatorStep.step.estimatedTime * operatorStep.quantity / design.totalTime;\n      totalSalary += operatorStep.step.estimatedTime * operatorStep.quantity * design.sewingValueForSecond;\n      return operatorStep;\n    });\n    return `${this.salaryFormatter(totalSalary)} - ${moment.duration(totalTime, 'seconds').format('hh [hr] mm [min]')} ~ ${parseInt(totalCompleteCount)} Dresses`;\n  }\n\n  calculateTransport(operator) {\n    let transport = 0;\n    transport = operator.distance * operator.lastMonthWRKDays * this.state.settings.perKMPrice * 2;\n    return this.state.settings.maxTransportAmount > transport ? transport : this.state.settings.maxTransportAmount;\n  }\n\n  calculateExtraPayments(operator) {\n    let extraPaymentTotal = 0;\n    operator.extraPayments.map((extraPayment) => {\n      return extraPaymentTotal += extraPayment.val;\n    });\n    return extraPaymentTotal;\n  }\n\n  calculateTotalSalary(operator) {\n    let totalSalary = operator.lastMonthSalary + operator.lastMonthBonus + this.calculateExtraPayments(operator);\n    if (this.state.settings.isTransportEnable) {\n      totalSalary += this.calculateTransport(operator);\n    }\n    return this.salaryFormatter(totalSalary);\n  }\n\n  addOperatorInfo(operators) {\n\n    let days = [];\n    operators.map((operator, i) => {\n      operator.operatorSteps && operator.operatorSteps.map((operatorStep, ind) => {\n        operatorStep.date = moment(operatorStep.completeTime).format('MMM DD YYYY');\n        return operatorStep;\n      });\n      operator.operatorSteps = lodash.groupBy(operator.operatorSteps, 'date');\n      Object.keys(operator.operatorSteps).map((key, index) => {\n        if (!days.includes(key) && index < 5) {\n          days.push(key);\n        }\n        return operator;\n      });\n      return operators;\n    });\n    days = days.slice(0, 5);\n    this.setState({\n      days: days.reverse(),\n    });\n  }\n\n  viewOperatorInfo(operator) {\n\n    this.setState({\n      modal: {\n        showInfoModal: true,\n      },\n      selectedOperator: operator,\n    });\n  }\n\n  viewSalarySheetModal = () => {\n    this.setState(prevState => ({\n      modal: {\n        ...prevState.modal,\n        showSalaryModal: true,\n      },\n    }));\n  };\n\n  handleClose = () => {\n    this.setState({\n      modal: {\n        ...this.state.modal,\n        showInfoModal: false,\n        showSalaryModal: false,\n      },\n    });\n  };\n\n  print() {\n    this.handleClose();\n    window.print();\n  }\n\n  sortOperator = (type) => {\n    if (type === 'today') {\n      let operators = lodash.orderBy(this.state.operators, ['todaySalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'yesterday') {\n      let operators = lodash.orderBy(this.state.operators, ['yesterdaySalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'thisMonth') {\n      let operators = lodash.orderBy(this.state.operators, ['thisMonthSalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n    if (type === 'lastMonth') {\n      let operators = lodash.orderBy(this.state.operators, ['lastMonthSalary'], ['desc']);\n      this.setState({\n        operators: operators,\n      });\n    }\n  };\n\n  updateOperatorStep = (operatorStep, key, ind) => {\n    trackPromise(\n      operatorService.updateOperatorSteps(operatorStep.id, {'quantity': operatorStep.updatedQuantity})\n        .then(\n          data => {\n            this.fetchOperators();\n            operatorStep.editable = false;\n            operatorStep.quantity = operatorStep.updatedQuantity;\n            let operator = this.state.selectedOperator;\n            operator.operatorSteps[key][ind] = operatorStep;\n            this.setState({\n              operator,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  };\n\n  render() {\n    const date = new Date();\n    return (\n      <Container className={'non-printable'}>\n        <br />\n        <div className='d-flex flex-row justify-content-between mt-2 mb-2'>\n          <div>\n            <ButtonGroup size='sm'>\n              <Button variant={this.state.operatorType === 'operator' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({operatorType: 'operator'})}>Machine Operator</Button>\n              <Button variant={this.state.operatorType === 'helper' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({operatorType: 'helper'})}>Helper</Button>\n            </ButtonGroup>\n\n            {this.state.operatorType === 'operator' &&\n            <h2 className={'mt-2'}>View Operators</h2>\n            }\n            {this.state.operatorType === 'helper' &&\n            <h2 className={'mt-2'}>View Helpers</h2>\n            }\n          </div>\n          <div>\n            <div className={'flex-column'}>\n              <div className={'d-flex flex-row'}>\n                <div>\n                  <div className={'justify-content-end'}>This Month Completed Count</div>\n                  <div className={'justify-content-end'}>Cleopatra</div>\n                  <div className={'justify-content-end'}>Nolimit</div>\n                </div>\n                <div>\n                  <div className={'justify-content-start'}> : {this.state.thisMonthCompletedCount}</div>\n                  <div className={'justify-content-start'}> : {this.state.thisMonthCLCompletedCount}</div>\n                  <div className={'justify-content-start'}> : {this.state.thisMonthNLMCompletedCount}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <div className={'flex-column'}>\n              <div className={'d-flex flex-row'}>\n                <div>\n                  <div className={'justify-content-end'}>Last Month Completed Count</div>\n                  <div className={'justify-content-end'}>Cleopatra</div>\n                  <div className={'justify-content-end'}>Nolimit</div>\n                </div>\n                <div>\n                  <div className={'justify-content-start'}> : {this.state.lastMonthCompletedCount}</div>\n                  <div className={'justify-content-start'}> : {this.state.lastMonthCLCompletedCount}</div>\n                  <div className={'justify-content-start'}> : {this.state.lastMonthNLMCompletedCount}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={'d-flex flex-column'}>\n            <Button variant={'primary'} onClick={this.viewSalarySheetModal}><FontAwesomeIcon\n              icon={faPrint} /> Print Salary Sheet</Button>\n\n            {this.state.operatorType === 'operator' &&\n            <ButtonGroup className={'mt-3'} size='sm'>\n              <Button variant={this.state.view === 'monthly' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({view: 'monthly'})}>Monthly</Button>\n              <Button variant={this.state.view === 'daily' ? 'primary' : 'outline-primary'}\n                      onClick={() => this.setState({view: 'daily'})}>Daily</Button>\n            </ButtonGroup>\n            }\n          </div>\n        </div>\n        {this.state.operatorType === 'operator' &&\n        <div>\n          <Row>\n            {this.state.view === 'monthly' &&\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                <th className={'d-none d-md-table-cell'}>Team</th>\n                <th className={'cursor-pointer d-none d-md-table-cell'}\n                    onClick={() => this.sortOperator('lastMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('thisMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('yesterday')}>\n                  Yesterday\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('today')}>\n                  Today\n                </th>\n                <th width={40}></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type !== '1') {\n                  return false;\n                }\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    <td className={'d-none d-md-table-cell'}>{operator.team}</td>\n                    <td className={'d-none d-md-table-cell'}>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.lastMonthSalary)}</strong> + <small\n                        className={'text-success'}>{this.salaryFormatter(operator.lastMonthBonus)}</small>\n                      </div>\n                      <div>\n                        <small>{this.timeFormatter(operator.lastMonthTime)}</small> ~ <small>{parseInt(operator.lastMonthCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.thisMonthSalary)}</strong> + <small\n                        className={'text-muted'}>{this.salaryFormatter(operator.thisMonthBonus)}</small>\n                      </div>\n                      <div>\n                        <small>{this.timeFormatter(operator.thisMonthTime)}</small> ~ <small>{parseInt(operator.thisMonthCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div><strong>{this.salaryFormatter(operator.yesterdaySalary)}</strong></div>\n                      <div>\n                        <small>{this.timeFormatter(operator.yesterdayTime)}</small> ~ <small>{parseInt(operator.yesterdayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div><strong>{this.salaryFormatter(operator.todaySalary)}</strong></div>\n                      <div>\n                        <small>{this.timeFormatter(operator.todayTime)}</small> ~ <small>{parseInt(operator.todayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n            }\n            {this.state.view === 'daily' &&\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                {this.state.days.map((day, ind) => {\n                  return (\n                    <th key={ind}>{this.state.days[ind]}</th>\n                  );\n                })}\n                <th></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type !== '1') {\n                  return false;\n                }\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    {this.state.days.map((day, ind) => {\n                      return (\n                        <td key={ind}>{this.calculateDaily(operator.operatorSteps[day])}</td>\n                      );\n                    })}\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n            }\n          </Row>\n        </div>\n        }\n        {this.state.operatorType === 'helper' &&\n        <div>\n          <Row>\n            <Table striped bordered hover size='sm'>\n              <thead>\n              <tr>\n                <th>Name</th>\n                <th className={'cursor-pointer d-none d-md-table-cell'}\n                    onClick={() => this.sortOperator('lastMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'} subtract={{months: 1}}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('thisMonth')}>\n                                        <span className={'d-none d-md-block'}>\n                                        <Moment format={'MMMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                  <span className={'d-block d-md-none'}>\n                                        <Moment format={'MMM'}>\n                                            {date}\n                                        </Moment>\n                                        </span>\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('yesterday')}>\n                  Yesterday\n                </th>\n                <th className={'cursor-pointer'} onClick={() => this.sortOperator('today')}>\n                  Today\n                </th>\n                <th width={40}></th>\n              </tr>\n              </thead>\n              <tbody>\n\n              {this.state.operators && this.state.operators.map((operator, ind) => {\n                if (operator.type === '1') {\n                  return false;\n                }\n                let isQC = operator.isQC;\n                return (\n                  <tr key={ind}>\n                    <td>{operator.name}</td>\n                    <td className={'d-none d-md-table-cell'}>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.lastMonthSalary + (isQC ? this.state.lastMonthCompletedCount * 10 : 0))} </strong>\n                        <br />\n                        ~ <small>{parseInt(operator.lastMonthCompleteCount)} Helper\n                        Dresses </small>\n                        {isQC &&\n                        <small> & {this.state.lastMonthCompletedCount} Checked Dresses</small>\n                        }\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.thisMonthSalary + (isQC ? this.state.thisMonthCompletedCount * 10 : 0))} </strong>\n                        <br />\n                        ~ <small>{parseInt(operator.thisMonthCompleteCount)} Helper\n                        Dresses</small>\n                        {isQC &&\n                        <small> & {this.state.thisMonthCompletedCount} Checked Dresses</small>\n                        }\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.yesterdaySalary)} </strong>\n                        ~ <small>{parseInt(operator.yesterdayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td>\n                      <div>\n                        <strong>{this.salaryFormatter(operator.todaySalary)} </strong>\n                        ~ <small>{parseInt(operator.todayCompleteCount)} Dresses</small>\n                      </div>\n                    </td>\n                    <td className={'text-center'}>\n                      <Button variant={'outline-primary'}\n                              onClick={() => this.viewOperatorInfo(operator)}\n                              size={'sm'}>\n                        <FontAwesomeIcon icon={faInfo} />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Table>\n          </Row>\n        </div>\n        }\n\n        {/*operator info modal*/}\n        <Modal scrollable show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n\n          <Modal.Header closeButton>\n            <Modal.Title>{this.state.selectedOperator.name}'s Activities</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Table striped bordered hover size='sm'>\n              <tbody>\n              <tr>\n                <td>Today Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.todayPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.todaySalary)}</td>\n              </tr>\n              <tr>\n                <td>This Month Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.thisMonthPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.thisMonthSalary)}</td>\n              </tr>\n              <tr>\n                <td>Last Month Work</td>\n                <td className={'text-right'}>{this.state.selectedOperator.lastMonthPercentage} %</td>\n                <td className={'text-right'}>{this.salaryFormatter(this.state.selectedOperator.lastMonthSalary)}</td>\n              </tr>\n              </tbody>\n            </Table>\n            <Accordion defaultActiveKey='0' className={'w-100'}>\n              {this.state.selectedOperator.operatorSteps && Object.keys(this.state.selectedOperator.operatorSteps).map((key) => {\n                return (\n                  <Accordion.Item key={key} eventKey={key}>\n                    <Accordion.Header className={'pl-1'}>\n                      <h6 className={'d-flex justify-content-between m-0'}>\n                        <span>{key}</span>\n                        <span>{this.calculateDaily(this.state.selectedOperator.operatorSteps[key])}</span>\n                      </h6>\n                    </Accordion.Header>\n                    <Accordion.Body className={'p-0'}>\n\n                      <Table striped bordered hover size='sm'\n                             className={'m-0'}>\n                        <tbody>\n                        {this.state.selectedOperator.operatorSteps[key].map((operatorStep, ind) => {\n                          let design = lodash.find(this.state.designs, {'id': operatorStep.step.designId});\n                          let isLast = this.state.selectedOperator.operatorSteps[key].length - 1 === ind;\n                          return (\n                            <tr key={ind}>\n                              <td\n                                className={`ps-4 border-left-0 ${isLast ? 'border-bottom-0' : ''}`}>{design.name}-{design.description}-{operatorStep.step.name}</td>\n                              <td className={isLast ? 'border-bottom-0' : ''}>\n                                {!operatorStep.editable &&\n                                <span>{operatorStep.quantity}</span>}\n                                {operatorStep.editable &&\n                                <div className={'d-flex'}>\n                                  <input name='quantity' type='number'\n                                         className='form-control'\n                                         defaultValue={operatorStep.quantity}\n                                         onChange={(e) => {\n                                           operatorStep.updatedQuantity = parseInt(e.target.value);\n                                           let operator = this.state.selectedOperator;\n                                           operator.operatorSteps[key][ind] = operatorStep;\n                                           this.setState({\n                                             operator,\n                                           });\n                                         }}\n                                  />\n                                  <Button variant={'primary'}\n                                          onClick={() => {\n                                            this.updateOperatorStep(operatorStep, key, ind);\n                                          }}\n                                          size={'sm'}>\n                                    <FontAwesomeIcon icon={faUpload} />\n                                  </Button>\n                                </div>\n                                }\n                              </td>\n                              <td\n                                className={isLast ? 'border-bottom-0' : ''}>{moment.duration(operatorStep.step.estimatedTime * operatorStep.quantity, 'seconds').format('d [d] hh [h] mm [min]')}</td>\n                              <td className={`text-center border-right-0 ${isLast ? 'border-bottom-0' : ''}`}>\n                                <Button variant={'outline-primary'} className='mr-1'\n                                        onClick={() => {\n                                          operatorStep.editable = !operatorStep.editable;\n                                          operatorStep.updatedQuantity = operatorStep.quantity;\n                                          let operator = this.state.selectedOperator;\n                                          operator.operatorSteps[key][ind] = operatorStep;\n                                          this.setState({\n                                            operator,\n                                          });\n                                        }}\n                                        size={'sm'}>\n                                  <FontAwesomeIcon icon={faEdit} />\n                                </Button>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                        </tbody>\n                      </Table>\n                    </Accordion.Body>\n                  </Accordion.Item>\n                );\n              })}\n            </Accordion>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button disabled={this.state.isLoading} variant='secondary' onClick={this.handleClose}>\n              Ok\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        {/*Salary modal*/}\n        <Modal scrollable show={this.state.modal.showSalaryModal} onHide={this.handleClose} centered>\n\n          <Modal.Header closeButton>\n            <Modal.Title>Salary Sheets</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className='printable'>\n            <Container>\n              <Row>\n                {this.state.operators && this.state.operators.map((operator, ind) => {\n                  if (operator.lastMonthTime === 0 && operator.type === '1') {\n                    return false;\n                  } else {\n                    return (\n                      <div key={ind} className={'salary-table w-50 mb-5'}>\n                        <Table borderless>\n                          <colgroup>\n                            <col />\n                            <col />\n                            <col />\n                          </colgroup>\n                          <tbody>\n                          <tr>\n                            <td colSpan={3} className={'text-center'}>\n                              <div className={'flex-column align-items-center'}>\n                                <div><img alt={'logo'} className={'logo-salary-print'}\n                                          src={logo} /></div>\n                                <br />\n                                <div><small>Garment</small></div>\n                                <div><small>Temple Road, Bingiriya</small></div>\n                              </div>\n                            </td>\n                          </tr>\n                          <tr className={'border-top'}>\n                            <td colSpan={3} className={'text-center'}>\n                              {operator.name} - <small>\n                              <Moment format={'MMMM YYYY'} subtract={{months: 1}}>\n                                {date}\n                              </Moment>\n                            </small>\n                            </td>\n                          </tr>\n\n                          {operator.type === '1' &&\n                          <>\n                            <tr className={'border-top'}>\n                              <td>Working Hours</td>\n                              <td className={'text-right'}>\n                                <small>{this.timeFormatter(operator.lastMonthTime)}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Completed Dresses</td>\n                              <td className={'text-right'}>\n                                <small>{parseInt(operator.lastMonthCompleteCount)}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Salary</td>\n                              <td></td>\n                              <td>{this.salaryFormatter(operator.lastMonthSalary)}</td>\n                            </tr>\n                            <tr>\n                              <td>Operator Of Month</td>\n                              <td className={'text-right'}>\n                                <small>{operator.performancePlaceLastMonth}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Operator Of Month Bonus</td>\n                              <td></td>\n                              <td className={'text-right'}>{this.salaryFormatter(operator.lastMonthBonus)}</td>\n                            </tr>\n                          </>\n                          }\n                          {operator.type === '2' &&\n                            <>\n                              <tr className={'border-top'}>\n                                <td>Completed Dresses (Nolimit)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthNLMCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses (Cleopatra)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthCLCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses (Moda Bella)</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthMBCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Completed Dresses Total</td>\n                                <td className={'text-right'}>\n                                  <small>{parseInt(operator.lastMonthCompleteCount)}</small>\n                                </td>\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td>Salary (Helper)</td>\n                                <td></td>\n                                <td className={'text-right'}>{this.salaryFormatter(operator.lastMonthSalary)}</td>\n                              </tr>\n                            </>\n                          }\n                          {this.state.settings.isTransportEnable &&\n                          <tr>\n                            <td>Transport</td>\n                            <td>\n                              <div>Work Days: <input style={{width: '50px'}}\n                                                     className={'small border-0'}\n                                                     defaultValue={operator.lastMonthWRKDays}\n                                                     onChange={(e) => {\n                                                       operator.lastMonthWRKDays = parseInt(e.target.value);\n                                                       let operators = this.state.operators;\n                                                       operators[ind] = operator;\n                                                       this.setState({\n                                                         operators,\n                                                       });\n                                                     }} />\n                              </div>\n                              <div>\n                                Distance (KM) : {operator.distance}\n                              </div>\n                            </td>\n                            <td\n                              className={'text-right'}>{this.salaryFormatter(this.calculateTransport(operator))}</td>\n                          </tr>\n                          }\n                          <tr className={'non-printable'}>\n                            <td colSpan={3}>\n                              <Button onClick={(e) => {\n                                let op = operator;\n                                op.extraPayments.push({\n                                  label: '',\n                                  val: 0,\n                                });\n                                let operators = this.state.operators;\n                                operators[ind] = op;\n                                this.setState({\n                                  operators,\n                                });\n                              }} variant='primary'>Add Extra</Button>\n                            </td>\n                          </tr>\n                          {operator.extraPayments.map((payment, i) => {\n                            return (\n                              <>\n                                <tr className='non-printable'>\n                                  <td>\n                                    <Button size={'sm'} variant='danger'> - </Button>\n                                  </td>\n                                  <td className='vertical_align_middle'>\n                                    <input className={'small border-0 border-bottom'}\n                                           defaultValue={payment.label}\n                                           onChange={(e) => {\n                                             payment.label = e.target.value;\n                                             let op = operator;\n                                             op.extraPayments[i] = payment;\n                                             let operators = this.state.operators;\n                                             operators[ind] = op;\n                                             this.setState({\n                                               operators,\n                                             });\n                                           }} />\n                                  </td>\n                                  <td className='vertical_align_middle'> Rs.\n                                    <input className={'small border-0 border-bottom'}\n                                           defaultValue={payment.val}\n                                           onChange={(e) => {\n                                             payment.val = parseInt(e.target.value);\n                                             let op = operator;\n                                             op.extraPayments[i] = payment;\n                                             let operators = this.state.operators;\n                                             operators[ind] = op;\n                                             this.setState({\n                                               operators,\n                                             });\n                                           }} />\n                                  </td>\n                                </tr>\n                                <tr className='d-none printable-row'>\n                                  <td className='vertical_align_middle'>{payment.label}</td>\n                                  <td></td>\n                                  <td className='vertical_align_middle'>{this.salaryFormatter(payment.val)}</td>\n                                </tr>\n                              </>\n                            );\n                          })}\n                          <tr className={'border-top'}>\n                            <td>Total Salary</td>\n                            <td></td>\n                            <td className={'text-right border-bottom'}>\n                              <strong>{this.calculateTotalSalary(operator)}</strong>\n                            </td>\n                          </tr>\n                          </tbody>\n                        </Table>\n                      </div>\n                    );\n                  }\n                  if (operator.type === '2') {\n                    return (\n                      <div key={ind} className={'salary-table w-100 mb-5'}>\n                        <Table borderless>\n                          <colgroup>\n                            <col />\n                            <col />\n                            <col />\n                          </colgroup>\n                          <tbody>\n                          <tr>\n                            <td colSpan={3} className={'text-center'}>\n                              <div className={'flex-column align-items-center'}>\n                                <div><img alt={'logo'} className={'logo-salary-print'}\n                                          src={'logo.png'} /></div>\n                                <br />\n                                <div><small>Garment</small></div>\n                                <div><small>Temple Road, Bingiriya</small></div>\n                              </div>\n                            </td>\n                          </tr>\n                          <tr className={'border-top'}>\n                            <td colSpan={3} className={'text-center'}>\n                              {operator.name} - <small>\n                              <Moment format={'MMMM YYYY'} subtract={{months: 1}}>\n                                {date}\n                              </Moment>\n                            </small>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>Completed Dresses (Helper)</td>\n                            <td className={'text-right'}>\n                              <small>{parseInt(operator.lastMonthCompleteCount)/ this.state.helpersCount}</small>\n                            </td>\n                            <td></td>\n                          </tr>\n                          <tr>\n                            <td>Salary (Helper)</td>\n                            <td></td>\n                            <td className={'text-right'}>{this.salaryFormatter(operator.lastMonthSalary)}</td>\n                          </tr>\n                          {operator.isQC &&\n                          <React.Fragment>\n                            <tr>\n                              <td>Completed Dresses (QC)</td>\n                              <td className={'text-right'}>\n                                <small>{parseInt(this.state.lastMonthCompletedCount)}</small>\n                              </td>\n                              <td></td>\n                            </tr>\n                            <tr>\n                              <td>Salary (QC)</td>\n                              <td></td>\n                              <td\n                                className={'text-right'}>{this.salaryFormatter(this.state.lastMonthCompletedCount * this.state.settings.qcPrice)}</td>\n                            </tr>\n                          </React.Fragment>\n                          }\n                          <tr className={'border-top'}>\n                            <td>Total Salary</td>\n                            <td></td>\n                            <td className={'text-right border-bottom'}>\n                              <strong>{this.salaryFormatter(operator.lastMonthSalary + (operator.isQC ? this.state.lastMonthCompletedCount * this.state.settings.qcPrice : 0))}</strong>\n                            </td>\n                          </tr>\n                          </tbody>\n                        </Table>\n                      </div>\n                    );\n                  }\n                  return true;\n                })}\n              </Row>\n            </Container>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='primary' onClick={() => {\n              this.print();\n            }}>Print</Button>{' '}\n            <Button variant='secondary' onClick={this.handleClose}>Cancel</Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {designService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddDesign extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                description: '',\n                quantity: 1,\n                sewingValue: 0,\n                type: 1,\n                brand: '',\n                startTime: new Date(),\n                isComplete: false\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    handleSubmit = (event) => {\n\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n            designService.addDesign(this.state.form)\n                .then(\n                    data => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: \"\"\n                            },\n                        });\n                        this.notifySuccess(`Design \"${data.name}\" added successfully`);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    getSawingValueDefault = (type, brand) => {\n        let val = 0;\n        if(type === 1){\n            if(brand === 'nolimit'){\n                val = 70\n            } else if(brand === 'cleopatra'){\n                val = 150\n            } else if(brand === 'modabella'){\n                val = 250\n            } else if(brand === 'sample'){\n                val = 250\n            }\n        } else {\n            if(brand === 'nolimit'){\n                val = 20\n            } else if(brand === 'cleopatra'){\n                val = 25\n            } else if(brand === 'modabella'){\n                val = 25\n            } else if(brand === 'sample'){\n                val = 25\n            }\n        }\n        return val;\n    };\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = parseInt(target.value);\n        const sewingValue = this.getSawingValueDefault(type, this.state.form.brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            type: type\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const sewingValue = this.getSawingValueDefault(this.state.form.type, brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            brand: brand\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h1>Add Design</h1>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} id=\"name\">\n                        <Form.Label column sm=\"2\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"description\">\n                        <Form.Label column sm=\"2\">\n                            Description\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type=\"text\" name={'description'} value={this.state.form.description}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label column sm=\"2\">Select Design Type</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control as=\"select\" name={'type'} onChange={this.handleDesignTypeChange} required>\n                                <option value=\"\"/>\n                                <option value=\"1\">Sawing</option>\n                                <option value=\"2\">Helper</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n                        <Form.Label column sm=\"2\">Select Brand</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control as=\"select\" name={'brand'} value={this.state.form.brand} onChange={this.handleBrandChange} required>\n                                <option value=\"\"/>\n                                <option value=\"nolimit\">Nolimit</option>\n                                <option value=\"cleopatra\">Cleopatra</option>\n                                <option value=\"modabella\">Moda Bella</option>\n                                <option value=\"sample\">Sample</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Form.Label column sm=\"2\">\n                            Quantity\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type={'number'} name={'quantity'} value={this.state.form.quantity} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"sewingValue\">\n                        <Form.Label column sm=\"2\">\n                            Sewing Value\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type={'number'} name={'sewingValue'} value={this.state.form.sewingValue} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\" disabled={this.state.isLoading} variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Add Design'}</Button>\n                </Form>\n\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Col, Container, Form, Modal, Row} from \"react-bootstrap\";\nimport {designService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class EditDesign extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            form: {\n                name: '',\n                description: '',\n                type: 1,\n                brand: '',\n                quantity: 0,\n                sewingValue: 0,\n                isComplete: false\n            },\n            modal:{\n                show: false,\n                title: '',\n                body: ''\n            },\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(this.props.design.name);\n        this.setState({\n            form: {\n                ...this.state.form,\n                name: this.props.design.name || '',\n                description: this.props.design.description || '',\n                type: this.props.design.type || 1,\n                brand: this.props.design.brand || '',\n                quantity: this.props.design.quantity || 0,\n                sewingValue: this.props.design.sewingValue || 0,\n                isComplete: this.props.design.isComplete || false,\n            }\n        })\n    }\n\n    handleSubmit = (event, data) => {\n\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n            trackPromise(\n            designService.editDesign(this.props.design.id, this.state.form).then(\n                data => {\n                    this.setState({\n                        isLoading: false,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Design \"${this.state.form.name}\" Updated successfully`\n                        }\n                    });\n                    this.props.design.description = this.state.form.description;\n                    this.props.design.type = this.state.form.type;\n                    this.props.design.brand = this.state.form.brand;\n                    this.props.design.name = this.state.form.name;\n                    this.props.design.quantity = this.state.form.quantity;\n                    this.props.design.sewingValue = this.state.form.sewingValue;\n                    this.props.design.isComplete = this.state.form.isComplete;\n                },\n                error => {\n                    this.setState({msg: error, isLoading: false});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    getSawingValueDefault = (type, brand) => {\n        let val = 0;\n        if(type === 1){\n            if(brand === 'nolimit'){\n                val = 70\n            } else if(brand === 'cleopatra'){\n                val = 150\n            } else if(brand === 'modabella'){\n                val = 250\n            } else if(brand === 'sample'){\n                val = 250\n            }\n        } else {\n            if(brand === 'nolimit'){\n                val = 20\n            } else if(brand === 'cleopatra'){\n                val = 25\n            } else if(brand === 'modabella'){\n                val = 25\n            } else if(brand === 'sample'){\n                val = 25\n            }\n        }\n        return val;\n    };\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = parseInt(target.value);\n        const sewingValue = this.getSawingValueDefault(type, this.state.form.brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            type: type,\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const sewingValue = this.getSawingValueDefault(this.state.form.type, brand)\n        const form = {\n            ...this.state.form,\n            sewingValue: sewingValue,\n            brand: brand\n        }\n        this.setState({\n            form: form,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name);\n\n        this.setState({\n            form: {\n                ...this.state.form,\n                [name]: value\n            }\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                show: false\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} id=\"name\">\n                        <Form.Label column sm=\"3\">\n                            Name\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type=\"text\" name={'name'} value={this.state.form.name}\n                                          onChange={this.handleInputChange}  required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"description\">\n                        <Form.Label column sm=\"3\">\n                            Description\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type=\"text\" name={'description'} value={this.state.form.description}\n                                          onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label column sm=\"3\">Select Design Type</Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control as=\"select\" name={'type'} value={this.state.form.type} onChange={this.handleDesignTypeChange}>\n                                <option value=\"1\">Sawing</option>\n                                <option value=\"2\">Helper</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"exampleForm.ControlSelect2\">\n                        <Form.Label column sm=\"3\">Select Brand</Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control as=\"select\" name={'brand'} value={this.state.form.brand} onChange={this.handleBrandChange} required>\n                                <option value=\"\"></option>\n                                <option value=\"nolimit\">Nolimit</option>\n                                <option value=\"cleopatra\">Cleopatra</option>\n                                <option value=\"modabella\">Moda Bella</option>\n                                <option value=\"sample\">Sample</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Form.Label column sm=\"3\">\n                            Quantity\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type={'number'} name={'quantity'} value={this.state.form.quantity} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"sewingValue\">\n                        <Form.Label column sm=\"3\">\n                            Sewing Value\n                        </Form.Label>\n                        <Col sm=\"9\">\n                            <Form.Control type={'number'} name={'sewingValue'} value={this.state.form.sewingValue} onChange={this.handleInputChange} required/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} id=\"quantity\">\n                        <Col sm=\"12\">\n                            <Form.Check type=\"checkbox\" id={'isComplete'} label=\"Check here for complete the design\" name={'isComplete'} checked={this.state.form.isComplete} onChange={this.handleInputChange}/>\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\" disabled={this.state.isLoading} variant={'dark'}>{this.state.isLoading ? 'Loading' : 'Edit Design'}</Button>\n                </Form>\n\n                <Modal show={this.state.modal.show} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.props.editComplete}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, ButtonGroup, Col, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\nimport {faCopy, faEdit, faInfo, faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport EditDesign from \"./EditDesign\";\nimport _ from \"lodash\";\nimport {authenticationService, designService, operationService} from \"../../../services\";\nimport {toast} from \"react-toastify\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport Moment from 'react-moment';\n\n\nexport default class ViewDesign extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            selectedOperation: [],\n            filteredDesign: [],\n            filter: {\n                keyword: '',\n                type: '',\n                brand: '',\n            },\n            currentUser: null,\n            view: 'incomplete',\n            modal: {\n                showConfirmation: false,\n                showInfoModal: false,\n                showOperationInfoModal: false,\n                showEditModal: false,\n                showDuplicateModal: false,\n                title: '',\n                body: ''\n            },\n            selectedDesign: {},\n            isLoading: false\n        };\n    }\n\n    notifyError = (error) => toast.error(error);\n    notifySuccess = (msg) => toast.success(msg);\n\n    componentDidMount() {\n        authenticationService.currentUser.subscribe(x => this.setState({\n            currentUser: x,\n        }));\n        this.fetchDesigns(this.state.view);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevState.filter !== this.state.filter || prevState.designs !== this.state.designs){\n            this.filterData();\n        }\n    }\n\n    fetchDesigns = (type) => {\n        trackPromise(\n            designService.getAllDesigns(type).then(\n                data => {\n                    this.setState({\n                        designs: data\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n    }\n\n    editDesign = (design) => {\n        this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showEditModal: true,\n                title: 'Edit Design',\n                body: ''\n            }\n        })\n    }\n\n    removeDesign = (design) => {\n        this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showConfirmation: true,\n                title: `Remove Design ${design.name}`,\n                body: 'Are you sure ?'\n            }\n        })\n    }\n\n    confirmDelete = () => {\n        this.setState({isLoading: true});\n        trackPromise(\n            designService.deleteDesign(this.state.selectedDesign.id).then(\n                data => {\n                    let designs = this.state.designs;\n                    let ind = designs.indexOf(this.state.selectedDesign);\n                    designs.splice(ind, 1);\n                    this.setState({\n                        designs: designs,\n                        isLoading: false,\n                    });\n                    this.handleClose();\n                    this.notifySuccess(`${this.state.selectedDesign.name} successfully deleted`)\n                },\n                error => {\n                    this.notifyError(error);\n                }\n            ));\n    }\n\n    duplicateDesign = (design) => {\n        let selectedDesign = _.cloneDeep(design);\n        delete selectedDesign.id;\n        selectedDesign.steps && selectedDesign.steps.forEach(function (step) {\n            delete step.id;\n            delete step.operatorSteps;\n            delete step.designId;\n        })\n        console.log(selectedDesign);\n        this.setState({\n            selectedDesign: selectedDesign,\n            modal: {\n                ...this.state.modal,\n                showDuplicateModal: true,\n                title: `Duplicate Design`,\n            }\n        })\n    }\n\n    confirmDesignDuplicate = () => {\n\n        this.setState({isLoading: true});\n        let selectedDesign = this.state.selectedDesign;\n        trackPromise(\n            designService.addDesign({\n                \"name\": selectedDesign.name,\n                \"description\": selectedDesign.description,\n                \"brand\": selectedDesign.brand,\n                \"quantity\": 0,\n                \"sewingValue\": selectedDesign.sewingValue,\n                \"startTime\": new Date(),\n                \"type\": selectedDesign.type,\n                \"isComplete\": false\n            })\n                .then(\n                    data => {\n                        this.duplicateOperations(data.id);\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    duplicateOperations = (id) => {\n\n        let selectedDesign = this.state.selectedDesign;\n        let steps = [];\n        selectedDesign.steps && selectedDesign.steps.forEach(function (step) {\n            step.designId = id;\n            steps.push(step)\n        })\n        trackPromise(\n            operationService.addAllOperations(steps)\n                .then(\n                    data => {\n                        this.setState({\n                            isLoading: false,\n                            form: {\n                                ...this.state.form,\n                                name: \"\"\n                            },\n                            modal: {\n                                ...this.state.modal,\n                                showDuplicateModal: false,\n                                title: 'Success',\n                                body: `Design \"${selectedDesign.name}\" duplicated successfully`\n                            }\n                        });\n\n                        this.notifySuccess(`Design \"${selectedDesign.name}\" duplicated successfully`)\n                        this.fetchDesigns('incomplete');\n                    },\n                    error => {\n                        this.notifyError(error);\n                    }\n                ));\n    }\n\n    viewDesignInfo = async (design) => {\n        await this.setState({\n            selectedDesign: design,\n            modal: {\n                ...this.state.modal,\n                showInfoModal: true,\n                title: `${design.name} Details`,\n                body: ''\n            }\n        })\n\n        this.calculateTotalTimeToComplete();\n        this.calculateCompletedTime();\n\n    }\n\n    calculateTimeToComplete = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let operationTimes = 0;\n        selectedDesign.steps.map((operation, ind) => {\n            return operationTimes += operation.estimatedTime;\n        });\n        return Math.floor(operationTimes / 60) + ' Minutes  ' + operationTimes % 60 + ' Seconds';\n    }\n\n    calculateCompletedTime = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let totalCompletedTime = 0;\n        selectedDesign.steps.map((operation, ind) => {\n\n            operation.operatorSteps && operation.operatorSteps.map((operatorStep, ind) => {\n                return totalCompletedTime += operatorStep.quantity * operation.estimatedTime;\n            });\n            return 0\n        });\n        selectedDesign.totalCompletedTime = totalCompletedTime;\n        this.setState({\n            selectedDesign: selectedDesign\n        })\n    }\n\n    calculateTotalTimeToComplete = () => {\n        let selectedDesign = this.state.selectedDesign;\n        if (!selectedDesign.steps) {\n            return 0\n        }\n        let operationTimes = 0;\n        selectedDesign.steps.map((operation, ind) => {\n            return operationTimes += operation.estimatedTime;\n        });\n        selectedDesign.totalTimeToComplete = operationTimes * this.state.selectedDesign.quantity;\n        this.setState({\n            selectedDesign: selectedDesign\n        })\n        return this.state.selectedDesign\n    }\n\n    timeFormatter = (time) => {\n        return Math.floor(time / 60 / 60) + ' Hours  ' + Math.floor(time / 60 % 60) + ' Minutes  ' + time % 60 + ' Seconds';\n    }\n\n    operationCompletedCount = (operatorSteps) => {\n        if (!operatorSteps) {\n            return 0\n        }\n        let completedCount = 0;\n        operatorSteps.map((operatorStep, ind) => {\n            return completedCount += operatorStep.quantity;\n        });\n        return (completedCount < this.state.selectedDesign.quantity ?\n            <span\n                className='text-warning'>{completedCount}</span> : completedCount > this.state.selectedDesign.quantity ?\n                <span className='text-danger'>{completedCount}</span> :\n                <span className='text-success'>{completedCount}</span>);\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showConfirmation: false,\n                showEditModal: false,\n                showInfoModal: false,\n                showOperationInfoModal: false,\n                showDuplicateModal: false,\n            }\n        });\n    }\n\n    handleDesignTypeChange = (event) => {\n        const target = event.target;\n        const type = target.value;\n        const filter = {\n            ...this.state.filter,\n            type: type\n        }\n        this.setState({\n            filter: filter,\n        });\n    }\n\n    handleBrandChange = (event) => {\n        const target = event.target;\n        const brand = target.value;\n        const filter = {\n            ...this.state.filter,\n            brand: brand\n        }\n        this.setState({\n            filter: filter,\n        });\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n        console.log(name, value);\n\n        this.setState({\n            filter: {\n                ...this.state.filter,\n                [name]: value\n            }\n        });\n    }\n\n    filterData = () => {\n        let brand = this.state.filter.brand;\n        let type = this.state.filter.type;\n        let keyword = this.state.filter.keyword.toLowerCase();\n        let filteredData = this.state.designs;\n        filteredData = _.filter(filteredData, function (design){\n            if(design.name.toLowerCase().includes(keyword) || design.description.toLowerCase().includes(keyword)){\n                return design;\n            }\n        });\n        if(brand !== '') {\n            filteredData = _.filter(filteredData, function (design) {\n                return design != null && design.brand === brand;\n            });\n        }\n        if(type !== '') {\n            filteredData = _.filter(filteredData, function (design) {\n                return design != null && design.type === parseInt(type);\n            });\n        }\n        this.setState({\n            filteredDesign: filteredData\n        })\n    }\n\n\n    viewOperationInfo = (design, operation) => {\n\n        this.setState({\n            selectedOperation: operation,\n            modal: {\n                ...this.state.modal,\n                showOperationInfoModal: true,\n                title: `${design.name} - ${operation.name} Details`,\n            }\n        })\n    }\n\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <div className=\"d-flex flex-row justify-content-between mt-2 mb-2\">\n                    <div className=\"custom-file w-25 text-left\">\n                        <h2>View Designs</h2>\n                    </div>\n                    <div className={'flex-row d-flex flex-grow-1'}>\n\n                        <Form.Group as={Col} id=\"name\">\n                            <div>\n                                <Form.Control type=\"text\" name={'keyword'} value={this.state.filter.keyword}\n                                              onChange={this.handleInputChange} required/>\n                            </div>\n                        </Form.Group>\n                    </div>\n                    <div className={'flex-row d-flex'}>\n\n                        <Form.Group className={'mb-0'} as={Col} controlId=\"exampleForm.ControlSelect1\">\n                            <div>\n                                <Form.Control defaultValue={''} className={'w-auto'} as=\"select\" name={'type'} onChange={this.handleDesignTypeChange}>\n                                    <option value=\"\" disabled>Select Type</option>\n                                    <option value=\"\"></option>\n                                    <option value=\"1\">Sawing</option>\n                                    <option value=\"2\">Helper</option>\n                                </Form.Control>\n                            </div>\n                        </Form.Group>\n\n                        <Form.Group className={'mb-0'} as={Col} controlId=\"exampleForm.ControlSelect1\">\n                            <div>\n                                <Form.Control defaultValue={''} className={'w-auto'} as=\"select\" name={'brand'} onChange={this.handleBrandChange} required>\n                                    <option value=\"\" disabled>Select Brand</option>\n                                    <option value=\"\"></option>\n                                    <option value=\"nolimit\">Nolimit</option>\n                                    <option value=\"cleopatra\">Cleopatra</option>\n                                    <option value=\"modabella\">Moda Bella</option>\n                                    <option value=\"sample\">Sample</option>\n                                </Form.Control>\n                            </div>\n                        </Form.Group>\n                    </div>\n                    <div>\n                        <ButtonGroup size=\"sm\">\n                            <Button variant={this.state.view === 'incomplete' ? 'primary' : 'outline-primary'}\n                                    onClick={() => {\n                                        this.setState({view: 'incomplete'});\n                                        this.fetchDesigns('incomplete')\n                                    }}>Incomplete</Button>\n                            <Button variant={this.state.view === 'complete' ? 'primary' : 'outline-primary'}\n                                    onClick={() => {\n                                        this.setState({view: 'complete'});\n                                        this.fetchDesigns('complete')\n                                    }}>Complete</Button>\n                            <Button variant={this.state.view === 'all' ? 'primary' : 'outline-primary'} onClick={() => {\n                                this.setState({view: 'all'});\n                                this.fetchDesigns('all')\n                            }}>All</Button>\n                        </ButtonGroup>\n                    </div>\n                </div>\n                <br/>\n                <Row>\n                    <Table striped bordered hover size=\"sm\" style={{'width': '100%'}}>\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th className={'d-none d-md-table-cell'}>Desc</th>\n                            <th className={'d-none d-md-table-cell'}>Type</th>\n                            <th className={'d-none d-md-table-cell'}>Brand</th>\n                            <th width={90} className={'d-none d-md-table-cell'}>Quantity</th>\n                            <th width={110}>Status</th>\n                            <th width={145}>Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.filteredDesign.map((design, ind) => {\n                            return (\n                                <tr key={ind}>\n                                    <td title={design.name}>\n                                        <div>{design.name}</div>\n                                    </td>\n                                    <td className={'d-none d-md-table-cell text-truncate'}\n                                        title={design.description}>{design.description}</td>\n                                    <td className={'d-none d-md-table-cell pr-3'}>{design.type === 1 ? 'Sawing' : 'Helper'}</td>\n                                    <td className={'d-none d-md-table-cell pr-3 text-capitalize'}>{design.brand}</td>\n                                    <td className={'d-none d-md-table-cell text-right pr-3'}>{design.quantity}</td>\n                                    <td>{design.isComplete ? 'Complete' : 'Not Complete'}</td>\n                                    <td>\n                                        <div className={\"d-flex align-items-center justify-content-center\"}>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.viewDesignInfo(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Details\"} icon={faInfo}/>\n                                            </Button>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.editDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Edit\"} icon={faEdit}/>\n                                            </Button>\n                                            <Button className={\"mr-1\"} variant={\"outline-primary\"}\n                                                    onClick={() => this.duplicateDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Duplicate\"} icon={faCopy}/>\n                                            </Button>\n                                            {this.state.currentUser && this.state.currentUser.roles.includes('admin') && !design.steps &&\n                                            <Button variant={\"danger\"} onClick={() => this.removeDesign(design)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon title={\"Delete\"} icon={faTrash}/>\n                                            </Button>\n                                            }\n                                        </div>\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Modal show={this.state.modal.showConfirmation} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.confirmDelete}>\n                            {this.state.isLoading ? 'Loading' : 'Confirm'}\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showEditModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <EditDesign design={this.state.selectedDesign} history={this.props.history}\n                                    editComplete={() => this.handleClose()}></EditDesign>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedDesign.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Desc</td>\n                                <td>{this.state.selectedDesign.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Quantity</td>\n                                <td>{this.state.selectedDesign.quantity}</td>\n                            </tr>\n                            <tr>\n                                <td>Sewing Value</td>\n                                <td>{this.state.selectedDesign.sewingValue}</td>\n                            </tr>\n                            <tr>\n                                <td>Time To Complete One</td>\n                                <td>{this.calculateTimeToComplete()}</td>\n                            </tr>\n                            <tr>\n                                <td>Time To Complete {this.state.selectedDesign.quantity}</td>\n                                <td>{this.timeFormatter(this.state.selectedDesign.totalTimeToComplete)}</td>\n                            </tr>\n                            <tr>\n                                <td>Currently Completed</td>\n                                <td>{this.timeFormatter(this.state.selectedDesign.totalCompletedTime)}</td>\n                            </tr>\n                            <tr>\n                                <td> Completed Percentage</td>\n                                <td>{Math.round((this.state.selectedDesign.totalCompletedTime / this.state.selectedDesign.totalTimeToComplete) * 10000) / 100} %</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th/>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.selectedDesign.steps && this.state.selectedDesign.steps.map((step, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{step.name}</td>\n                                        <td className={'text-right'}>{this.operationCompletedCount(step.operatorSteps)}</td>\n                                        <td className={'text-center'}>\n                                            <Button variant={\"outline-primary\"}\n                                                    onClick={() => this.viewOperationInfo(this.state.selectedDesign, step)}\n                                                    size={\"sm\"}>\n                                                <FontAwesomeIcon icon={faInfo}/>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                {/*Duplicate modal*/}\n                <Modal show={this.state.modal.showDuplicateModal} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Row className={\"mb-3\"}>\n                            <Col md={5}>\n                                {this.state.selectedDesign.name}\n                            </Col>\n                            <Col md={7}>\n                                {this.state.selectedDesign.description}\n                            </Col>\n                        </Row>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Description</th>\n                                <th>Estimated Time</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.selectedDesign.steps && this.state.selectedDesign.steps.map((step, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{step.name}</td>\n                                        <td>{step.description}</td>\n                                        <td>{step.estimatedTime}</td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"primary\" onClick={this.confirmDesignDuplicate}>\n                            Duplicate\n                        </Button>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal scrollable show={this.state.modal.showOperationInfoModal} onHide={() => {\n                    this.setState({\n                        modal: {\n                            ...this.state.modal,\n                            showOperationInfoModal: false,\n                        }\n                    });\n                }} centered>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedOperation.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Description</td>\n                                <td>{this.state.selectedOperation.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Estimated Time (S)</td>\n                                <td>{this.state.selectedOperation.estimatedTime}</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th width={150}>Completed On</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n\n                            {this.state.selectedOperation.operatorSteps && this.state.selectedOperation.operatorSteps.map((operatorStep, ind) => {\n                                return (\n                                  <tr key={ind}>\n                                      <td>{operatorStep.operator && operatorStep.operator.name}</td>\n                                      <td>{operatorStep.quantity}</td>\n                                      <td><Moment format={'YYYY-MMM-DD'}>{operatorStep.completeTime}</Moment></td>\n                                  </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={() => {\n                            this.setState({\n                                modal: {\n                                    ...this.state.modal,\n                                    showOperationInfoModal: false,\n                                }\n                            });\n                        }}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React, {Fragment} from \"react\";\nimport {Button, Col, Container, Form, Modal, Row} from \"react-bootstrap\";\nimport {faClock, faPlus, faUpload} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Timer from \"react-compound-timer\";\nimport {designService, operationService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class AddOperation extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.userTimer = React.createRef();\n        this.state = {\n            designs: [],\n            selectedDesign: false,\n            selectedOperationIndex: false,\n            form: [\n                {\n                    name: '',\n                    description: '',\n                    estimatedTime: '',\n                    designId: null,\n                }\n            ],\n            modal: {\n                show: false,\n                title: '',\n                body: ''\n            },\n            timerModal: false,\n            validated: false,\n            isLoading: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchDesigns();\n    }\n\n    fetchDesigns() {\n        trackPromise(\n        designService.getIncompleteDesignsWithOperations().then(\n            data => {\n                let operations = data[0] && data[0].steps ? data[0].steps : [{\n                    name: '',\n                    description: '',\n                    estimatedTime: 0,\n                    designId: data[0] ? data[0].id : undefined\n                }];\n                this.setState({\n                    designs: data,\n                    selectedDesign: data[0],\n                    form: operations\n                });\n            },\n            error => {\n                this.setState({msg: error});\n                console.error('Error:', error);\n            }\n        ));\n    }\n\n    handleAddOperation = () => {\n        const values = [...this.state.form];\n        values.unshift({name: '', description: '', estimatedTime: 0, designId: this.state.selectedDesign.id});\n        this.setState({\n            form: values\n        });\n    };\n\n    handleRemoveOperation = (index, isInDb) => {\n        const values = [...this.state.form];\n        values.splice(index, 1);\n        this.setState({\n            form: values\n        });\n    };\n\n    handleUpdateOperation = (index, event) => {\n        if (!this.state.selectedDesign) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false\n        }\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n\n            const operation = this.state.form[index];\n            delete operation.isChange;\n            trackPromise(\n            operationService.updateOperations(operation.id, operation).then(\n                data => {\n                    let values = this.state.form;\n                    values[index].isChange = false;\n                    values[index].id = data.id;\n                    this.setState({\n                        isLoading: false,\n                        form: values,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Operation \"${data.name}\" Added Successfully`\n                        }\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleCreateOperation = (index, event) => {\n        if (!this.state.selectedDesign) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false\n        }\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            this.setState({validated: true});\n        } else {\n            this.setState({isLoading: true});\n\n            const operation = this.state.form[index];\n            delete operation.isChange;\n            trackPromise(\n            operationService.addOperations(operation).then(\n                data => {\n                    let values = this.state.form;\n                    values[index].isChange = false;\n                    values[index].id = data.id;\n                    this.setState({\n                        isLoading: false,\n                        form: values,\n                        modal: {\n                            ...this.state.modal,\n                            show: true,\n                            title: 'Success',\n                            body: `Operation \"${data.name}\" Added Successfully`\n                        }\n                    });\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            ));\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleInputChange = (index, event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n        const name = target.name;\n\n        let values = this.state.form;\n        values[index][name] = value;\n        values[index].isChange = value !== '';\n        this.setState({\n            form: values\n        });\n    }\n\n    handleDesignChange = (event) => {\n        const target = event.target;\n        const index = target.value;\n\n        if (index === '') {\n            this.setState({\n                form: [],\n                selectedDesign: false\n            });\n            return false;\n        }\n        const design = this.state.designs[index];\n\n        const operations = design.steps ? design.steps : [{\n            name: '',\n            description: '1',\n            estimatedTime: 0,\n            designId: design.id,\n        }]\n        this.setState({\n            form: operations,\n            selectedDesign: design\n        });\n    }\n\n    handleTimer = (index) => {\n        this.setState({\n            timerModal: true,\n            selectedOperationIndex: index\n        })\n    }\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                show: false\n            }\n        });\n    }\n\n    render() {\n        return (\n\n            <Container>\n                <br/>\n                <h2>Add Operations</h2>\n                <br/>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label>Select Design</Form.Label>\n                        <Form.Control as=\"select\" onChange={this.handleDesignChange}>\n                            {this.state.designs.length > 0 && this.state.designs.map((design, index) => (\n                                <option value={index} key={index}>{design.name}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                    {this.state.form.length > 0 && this.state.form.map((inputField, index) => (\n                        <Fragment key={index}>\n                            <Row className={'align-items-center no-gutters'}>\n                                <h5 className={'mr-2'}>Operation {index + 1} --</h5><h6 className={'mr-2'}> Hourly\n                                Target </h6><h6 className={'mr-2'}> (Idle)\n                                = {Math.floor(3600 / inputField.estimatedTime)}, </h6><h6 className={'mr-2'}> (Minimum)\n                                = {Math.floor((3600 / inputField.estimatedTime) * .8)}</h6>\n                            </Row>\n                            <hr className={'mt-0'}/>\n                            <Form.Group as={Row}>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Name\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name={'name'} value={inputField.name}\n                                                  onChange={event => this.handleInputChange(index, event)} required/>\n                                </Col>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Description\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name={'description'} value={inputField.description}\n                                                  onChange={event => this.handleInputChange(index, event)}/>\n                                </Col>\n                                <Col sm={12} md={3} className={'mb-2'}>\n                                    <Form.Label>\n                                        Estimated Time (S)\n                                    </Form.Label>\n                                    <Row>\n                                        <Col xs={9}>\n                                            <Form.Control type=\"number\" name={'estimatedTime'}\n                                                          value={inputField.estimatedTime}\n                                                          onChange={event => this.handleInputChange(index, event)}\n                                                          required/>\n                                        </Col>\n                                        <Col xs={3}>\n                                            <Button type=\"button\" variant={'dark'} onClick={() => this.handleTimer(index)}>\n                                                <FontAwesomeIcon icon={faClock}/>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                                <Col sm={12} md={3}\n                                     className={'mb-2 d-flex align-items-end justify-content-center pt-3'}>\n                                    {index === 0 &&\n                                    <Button type=\"button\" variant={'dark'} onClick={() => this.handleAddOperation()}>\n                                        <FontAwesomeIcon icon={faPlus}/>\n                                    </Button>\n                                    }\n                                    {/*&nbsp;*/}\n                                    {/*{this.state.form.length !== (index + 1) &&*/}\n                                    {/*<Button type=\"button\" variant={'dark'}*/}\n                                    {/*        onClick={() => this.handleRemoveOperation(index, !!this.state.form.id)}>*/}\n                                    {/*    <FontAwesomeIcon icon={faTrash}/>*/}\n                                    {/*</Button>*/}\n                                    {/*}*/}\n\n                                    &nbsp;\n                                    {inputField.isChange && inputField.id &&\n                                    <Button type=\"button\" variant={'dark'}\n                                            disabled={this.state.isLoading || !this.state.selectedDesign || inputField.name.replace(/ /g, \"\") === '' || inputField.description.replace(/ /g, \"\") === '' || inputField.estimatedTime < 1}\n                                            onClick={(event) => this.handleUpdateOperation(index, event)}>\n                                        <FontAwesomeIcon icon={faUpload}/>\n                                    </Button>\n                                    }\n                                    {inputField.isChange && !inputField.id &&\n                                    <Button type=\"button\" variant={'dark'}\n                                            disabled={this.state.isLoading || !this.state.selectedDesign || inputField.name.replace(/ /g, \"\") === '' || inputField.description.replace(/ /g, \"\") === '' || inputField.estimatedTime < 1}\n                                            onClick={(event) => this.handleCreateOperation(index, event)}>\n                                        <FontAwesomeIcon icon={faUpload}/>\n                                    </Button>\n                                    }\n                                </Col>\n                            </Form.Group>\n                        </Fragment>\n\n                    ))}\n\n                </Form>\n\n                <Modal show={this.state.modal.show} onHide={this.handleClose} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.modal.body}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.timerModal} onHide={()=>{this.setState({timerModal:false})}} centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Timer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className={'text-center'}>\n\n\n                        <Timer ref={this.userTimer}\n                               initialTime={0}\n                               startImmediately={false}\n                        >\n                            {({ start, resume, pause, stop, reset }) => (\n                                <React.Fragment>\n                                    <Row>\n                                        <h1 className=\" col-6 pr-0 text-center\"><Timer.Minutes /> min</h1>\n                                        <h1 className=\" col-6 text-center\"><Timer.Seconds /> sec</h1>\n                                    </Row>\n                                </React.Fragment>\n                            )}\n                        </Timer>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                        <Button variant=\"primary\" onClick={()=>{this.userTimer.current.start()}}>\n                            start\n                        </Button>\n                        <Button variant=\"secondary\" onClick={()=>{this.userTimer.current.pause()}}>\n                            pause\n                        </Button>\n                        <Button variant=\"warning\" onClick={()=>{this.userTimer.current.reset()}}>\n                            reset\n                        </Button>\n                        <Button variant=\"info\" onClick={()=>{\n                            let form = this.state.form;\n                            let selectedOperation = form[this.state.selectedOperationIndex];\n                            selectedOperation.estimatedTime = Math.floor(this.userTimer.current.getTime()/1000);\n                            selectedOperation.isChange = true;\n                            console.log(form);\n                            this.setState({\n                                form: form,\n                                timerModal: false,\n                            })\n                        }}>\n                            set\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button, Container, Modal, Row, Table} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faInfo} from \"@fortawesome/free-solid-svg-icons\";\nimport Moment from \"react-moment\";\nimport {designService} from \"../../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\n\n\nexport default class ViewOperation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            selectedOperation: [],\n            modal: {\n                showInfoModal: false,\n                title: '',\n                body: ''\n            }\n        };\n    }\n\n    componentDidMount() {\n        trackPromise(\n        designService.getAllIncompleteDesignsWithOperator().then(\n            data => {\n                this.setState({\n                    designs: data\n                });\n            },\n            error => {\n                this.setState({msg: error});\n                console.error('Error:', error);\n            }\n        ));\n    }\n\n\n    operationCompletedCount = (operatorSteps, design) => {\n        if (!operatorSteps) {\n            return 0\n        }\n        let completedCount = 0;\n        operatorSteps.map((operatorStep, ind) => {\n            return completedCount += operatorStep.quantity;\n        });\n        return (completedCount < design.quantity ?\n            <span\n                className='text-warning'>{completedCount}</span> : completedCount > design.quantity ?\n                <span className='text-danger'>{completedCount}</span> :\n                <span className='text-success'>{completedCount}</span>);\n    }\n\n\n    viewOperationInfo = (design, operation) => {\n\n        this.setState({\n            selectedOperation: operation,\n            modal: {\n                ...this.state.modal,\n                showInfoModal: true,\n                title: `${design.name} - ${operation.name} Details`,\n            }\n        })\n    }\n\n\n    handleClose = () => {\n        this.setState({\n            modal: {\n                ...this.state.modal,\n                showInfoModal: false,\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Container>\n                <br/>\n                <h2>View Operations</h2>\n                <br/>\n                {this.state.designs.map((design, ind) => {\n                    return (\n                        <Row key={ind}>\n                            <h4>{design.name} - {design.description} </h4>\n                            <Table striped bordered hover size=\"sm\">\n                                <thead>\n                                <tr>\n                                    <th>Op. Name</th>\n                                    <th className={'d-none d-md-table-cell'}>Op. Description</th>\n                                    <th width={110} className={'d-none d-md-table-cell'}>Est. Time</th>\n                                    <th width={100}>Completed</th>\n                                    <th width={50}></th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {design.steps && design.steps.map((step, ind) => {\n                                    return (\n                                        <tr key={ind}>\n                                            <td>{step.name}</td>\n                                            <td className={'d-none d-md-table-cell'}>{step.description}</td>\n                                            <td className={'d-none d-md-table-cell'}>{step.estimatedTime}</td>\n                                            <td className={'text-right'}>{this.operationCompletedCount(step.operatorSteps, design)}</td>\n                                            <td className={'text-center'}>\n                                                <Button variant={\"outline-primary\"}\n                                                        onClick={() => this.viewOperationInfo(design, step)}\n                                                        size={\"sm\"}>\n                                                    <FontAwesomeIcon icon={faInfo}/>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </Table>\n                        </Row>\n                    )\n                })}\n\n\n                <Modal scrollable show={this.state.modal.showInfoModal} onHide={this.handleClose} centered>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modal.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Table striped bordered hover size=\"sm\">\n                            <tbody>\n                            <tr>\n                                <td>Name</td>\n                                <td>{this.state.selectedOperation.name}</td>\n                            </tr>\n                            <tr>\n                                <td>Description</td>\n                                <td>{this.state.selectedOperation.description}</td>\n                            </tr>\n                            <tr>\n                                <td>Estimated Time (S)</td>\n                                <td>{this.state.selectedOperation.estimatedTime}</td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                        <br/>\n                        <h6>Operations</h6>\n                        <Table striped bordered hover size=\"sm\">\n                            <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th width={150}>Completed Count</th>\n                                <th width={150}>Completed On</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n\n                            {this.state.selectedOperation.operatorSteps && this.state.selectedOperation.operatorSteps.map((operatorStep, ind) => {\n                                return (\n                                    <tr key={ind}>\n                                        <td>{operatorStep.operator && operatorStep.operator.name}</td>\n                                        <td>{operatorStep.quantity}</td>\n                                        <td><Moment format={'YYYY-MMM-DD'}>{operatorStep.completeTime}</Moment></td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button disabled={this.state.isLoading} variant=\"secondary\" onClick={this.handleClose}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        );\n    }\n}\n","import React from 'react';\nimport {Button, Col, Container, Form, Row} from 'react-bootstrap';\nimport lodash from 'lodash';\nimport {operatorService} from '../../../services';\nimport {toast} from 'react-toastify';\nimport {trackPromise} from 'react-promise-tracker';\nimport DatePicker from 'react-date-picker';\n\nexport default class OperatorOperations extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      operators: [],\n      designs: [],\n      operations: [],\n      selectedOperator: false,\n      selectedDesign: false,\n      selectedOperation: false,\n      form: {\n        operatorId: '',\n        stepId: '',\n        quantity: 0,\n        completedTime: new Date(),\n      },\n      isLoading: false,\n    };\n\n    // this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.fetchOperators();\n    this.fetchDesigns();\n  }\n\n  notifyError = (error) => toast.error(error);\n  notifySuccess = (msg) => toast.success(msg);\n\n  fetchDesigns() {\n    trackPromise(\n      operatorService.fetchDesigns()\n        .then(\n          data => {\n            this.setState({\n              designs: data,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  }\n\n  fetchOperators() {\n    trackPromise(\n      operatorService.getOperators()\n        .then(\n          data => {\n            this.setState({\n              operators: data,\n            });\n          },\n          error => {\n            this.setState({msg: error});\n            console.error('Error:', error);\n          },\n        ),\n    );\n  }\n\n  handleDesignChange = (event) => {\n    const target = event.target;\n    const index = target.value;\n\n    if (index === '') {\n      this.setState({\n        selectedDesign: false,\n        selectedOperation: false,\n      });\n      return false;\n    }\n    const design = this.state.designs[index];\n\n    const operations = design.steps ? design.steps : false;\n    this.setState({\n      operations: operations,\n      selectedDesign: design,\n      selectedOperation: false,\n      form: {\n        ...this.state.form,\n        completedTime: new Date(),\n      }\n    });\n  };\n\n  handleSubmit = (event) => {\n    trackPromise(\n      operatorService.addOperatorOperations({\n        'quantity': this.state.form.quantity,\n        'completeTime': this.state.form.completedTime,\n        'operatorId': this.state.selectedOperator.id,\n        'stepId': this.state.selectedOperation.id,\n\n      }).then(\n        data => {\n          let completedQuantity = lodash.cloneDeep(data.quantity);\n          console.log(completedQuantity);\n          this.setState({\n            form: {\n              ...this.state.form,\n              quantity: 0,\n            },\n          });\n          this.notifySuccess(`${this.state.selectedOperator ? this.state.selectedOperator.name : ''} has\n                    completed ${completedQuantity} of ${this.state.selectedDesign ? this.state.selectedDesign.name : ''} - ${this.state.selectedOperation ? this.state.selectedOperation.name : ''}`);\n        },\n        error => {\n          this.notifyError(error);\n        },\n      ),\n    );\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.type === 'number' ? (parseInt(target.value) ? parseInt(target.value) : '') : target.value;\n    const name = target.name;\n\n    this.setState({\n      form: {\n        ...this.state.form,\n        [name]: value,\n      },\n    });\n  };\n\n  handleDateChange = (event) => {\n    const name = 'completedTime';\n\n    this.setState({\n      form: {\n        ...this.state.form,\n        [name]: event,\n      },\n    });\n  };\n\n  render() {\n    return (\n\n      <div>\n        <Container>\n          <div\n            aria-live='polite'\n            aria-atomic='true'\n            style={{\n              position: 'relative',\n              minHeight: '0',\n            }}>\n          </div>\n          <br />\n          <h2>Operator Operations</h2>\n          <br />\n          <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n            <Form.Group className={'mt-3'} controlId='operators'>\n              <Form.Label>Select Operator</Form.Label>\n              <Form.Control as='select' onChange={(event) => {\n                this.setState({selectedOperator: this.state.operators[event.target.value]});\n              }}>\n                <option></option>\n                {this.state.operators.length > 0 && this.state.operators.map((operator, index) => (\n                  <option value={index} key={index}>{operator.name}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            {this.state.selectedOperator &&\n            <Form.Group className={'mt-3'} controlId='designs'>\n              <Form.Label>Select Design</Form.Label>\n              <Form.Control as='select' onChange={this.handleDesignChange}>\n                <option></option>\n                {this.state.designs.length > 0 && this.state.designs.map((design, index) => {\n                  if((design.type === 1 && this.state.selectedOperator.type === '1') || (design.type === 2 && this.state.selectedOperator.type === '2')) {\n                    return <option value={index} key={index}>{design.name} ----- {design.description}</option>\n                  }\n                }\n                )}\n              </Form.Control>\n            </Form.Group>\n            }\n            {this.state.selectedDesign &&\n            <Form.Group className={'mt-3'} controlId='operations'>\n              <Form.Label>Select Operation</Form.Label>\n              <Form.Control as='select' onChange={(event) => {\n                console.log(event.target.value);\n                this.setState({selectedOperation: this.state.operations[event.target.value]});\n              }}>\n                <option></option>\n                {this.state.operations.length > 0 && this.state.operations.map((operation, index) => (\n                  <option value={index} key={index}>{operation.name}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            }\n\n            {this.state.selectedOperation &&\n            <>\n              <Form.Group className='mt-3' id='completedTime'>\n                <Form.Label>Completed Date</Form.Label>\n                <Row>\n                  <DatePicker name={'completedTime'} onChange={this.handleDateChange}\n                              value={this.state.form.completedTime} />\n                </Row>\n              </Form.Group>\n              <Form.Group className={'mt-3'} id='quantity'>\n                <Form.Label>\n                  Quantity\n                </Form.Label>\n                <Form.Control type='number' name={'quantity'} value={this.state.form.quantity}\n                              onChange={this.handleInputChange}\n                              required />\n              </Form.Group>\n            </>\n            }\n\n            {this.state.selectedOperation && this.state.form.quantity > 0 &&\n            <Button className={'mt-4 mb-4'} type='submit' variant={'dark'}\n                    disabled={this.state.isLoading || !this.state.selectedDesign}>\n              Add Operator Operations\n            </Button>\n            }\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n","import {React, useState} from 'react';\nimport {Form, Button} from 'react-bootstrap';\nimport {authenticationService} from \"../../services\";\nimport {trackPromise} from \"react-promise-tracker\";\nimport {useNavigate} from 'react-router-dom';\n\nconst SignIn = () => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [msg] = useState('')\n\n    const navigate = useNavigate()\n\n\n    const onFormSubmit = (e) => {\n        trackPromise(\n        authenticationService.login(email, password)\n            .then(\n                user => {\n                    if(user.roles.indexOf('admin') !== -1){\n                        navigate('/');\n                    } else if(user.roles.indexOf('manager') !== -1){\n                        navigate('/');\n                    } else if(user.roles.indexOf('manager') !== -1){\n                        navigate('/');\n                    }\n                },\n                error => {\n                    this.setState({msg: error});\n                    console.error('Error:', error);\n                }\n            )\n        );\n\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    return (\n        <div\n            style={{height: \"calc(100vh - 56px)\"}}\n            className=\"d-flex justify-content-center align-items-center\"\n        >\n            <div style={{width: 300}}>\n                <h1 className=\"text-center\">Sign in</h1>\n                <Form onSubmit={onFormSubmit}>\n                    <span className='text-danger'>{msg}</span>\n                    <Form.Group>\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            defaultValue={email}\n                            onChange={e => {\n                                setEmail(e.target.value);\n                            }}\n                        />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            defaultValue={password}\n                            onChange={e => {\n                                setPassword(e.target.value);\n                            }}\n                        />\n                    </Form.Group>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                        className=\"w-100 mt-3\"\n                    >\n                        Sign in\n                    </Button>\n                </Form>\n            </div>\n        </div>\n    )\n};\n\nexport default SignIn;\n","import React  from 'react';\nimport { Navigate } from 'react-router-dom';\nimport {authenticationService} from \"../services\";\n\nconst PrivateRoute = ({ children, roles }) => {\n\n    // return (\n    //     <Route {...rest}\n    //         render={routeProps => {\n    //             const currentUser = authenticationService.currentUserValue;\n    //             if (!currentUser) {\n    //                 // not logged in so redirect to login page with the return url\n    //                 return <Navigate to={{ pathname: '/sign-in', state: { from: routeProps.location } }} />\n    //             }\n    //\n    //             // check if route is restricted by role\n    //             if (roles && roles.filter(value => currentUser.roles.includes(value)).length === 0) {\n    //                 // role not authorised so redirect to home page\n    //                 return authenticationService.logout();\n    //             }\n    //             return <Outlet {...routeProps} />;\n    //         }}\n    //     />\n    // );\n  const currentUser = authenticationService.currentUserValue;\n  if (!currentUser) {\n    // not logged in so redirect to login page with the return url\n    return <Navigate to='/sign-in'/>\n  }\n\n  // check if route is restricted by role\n  if (roles && roles.filter(value => currentUser.roles.includes(value)).length === 0) {\n    // role not authorised so redirect to home page\n    return authenticationService.logout();\n  }\n  return children;\n    /*  we are spreading routeProps to be able to access this routeProps in the component. */\n};\n\nexport default PrivateRoute;\n","import React from 'react';\n\n// Set up all routes in App\nimport {Link, Route, Routes} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Using custom styled components from Global folder in components\n\n// Importing all routes\nimport {Container, Nav, Navbar, NavDropdown} from 'react-bootstrap';\nimport {AddOperator, EditOperator, ViewOperator} from './components/GarmentSawing/Operator';\nimport {AddDesign, EditDesign, ViewDesign} from './components/GarmentSawing/Design';\nimport {AddOperation, ViewOperation} from './components/GarmentSawing/Operation';\nimport OperatorOperations from './components/GarmentSawing/Operator/OperatorOperations';\nimport SignIn from './components/SignIn/SignIn';\nimport PrivateRoute from './helpers/PrivateRote';\nimport {authenticationService} from './services';\nimport {ToastContainer, toast} from 'react-toastify';\n\ntoast.configure({\n  autoClose: 15000,\n});\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n    };\n  }\n\n  componentDidMount() {\n    authenticationService.currentUser.subscribe(x => this.setState({\n      currentUser: x,\n    }));\n  }\n\n  allowNav(allowedRole) {\n    return this.state.currentUser?.roles?.filter(value => allowedRole.includes(value)).length > 0 ? true : false;\n  }\n\n  onLogOut = () => {\n    authenticationService.logout();\n  }; //clearing the context\n\n  render() {\n    return (\n      <div>\n        <ToastContainer />\n        <Navbar bg='dark' variant='dark' sticky='top' expand={'lg'} collapseOnSelect>\n\n          <Container fluid>\n            <Navbar.Brand>\n              {/*<img src=\"/logo192.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"React Bootstrap logo\"/>*/}\n              DEEZ\n            </Navbar.Brand>\n            {this.state.currentUser &&\n            <Navbar.Toggle aria-controls='basic-navbar-nav' />\n            }\n\n            {this.state.currentUser &&\n            <Navbar.Collapse id='basic-navbar-nav'>\n              <Nav className='me-auto'>\n                <NavDropdown title='Operators' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='11' as={Link} to='/add-operator'>\n                    Add Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='12' as={Link} to='/edit-operator'>\n                    Edit Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='13' as={Link} to='/view-operator'>\n                    View Operators\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='14' as={Link} to='/operator-operations'>\n                    Operator Operations\n                  </NavDropdown.Item>\n                </NavDropdown>\n                <NavDropdown title='Design' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='21' as={Link} to='add-design'>\n                    Add Design\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='22' as={Link} to='view-design'>\n                    View Design\n                  </NavDropdown.Item>\n                </NavDropdown>\n                <NavDropdown title='Operations' id='basic-nav-dropdown'>\n                  <NavDropdown.Item eventKey='31' as={Link} to='add-operations'>\n                    Add Operations\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey='32' as={Link} to='view-operations'>\n                    View Operations\n                  </NavDropdown.Item>\n                </NavDropdown>\n              </Nav>\n              <Nav>\n                <h6\n                  className='text-center text-white mb-0 d-lg-flex align-items-center d-none'> {`Hello, ${this.state.currentUser.username}`} </h6>\n                <Nav.Link onClick={this.onLogOut}>Log out</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n            }\n          </Container>\n        </Navbar>\n        <Container fluid>\n          <Routes>\n            <Route path='/sign-in' element={<SignIn />} />\n            <Route\n              path=''\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/edit-operator'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <EditOperator />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/operator-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <OperatorOperations />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/edit-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <EditDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-design'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewDesign />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/add-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <AddOperation />\n                </PrivateRoute>\n              }\n            />\n            <Route\n              path='/view-operations'\n              element={\n                <PrivateRoute roles={['admin', 'manager']}>\n                  <ViewOperation />\n                </PrivateRoute>\n              }\n            />\n          </Routes>\n        </Container>\n      </div>\n    );\n  }\n}\n","export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\nexport const increment = () => {\n  return {\n    type: INCREMENT,\n    payload: 1\n  };\n};\n\nexport const decrement = () => {\n  return {\n    type: DECREMENT,\n    payload: 1\n  };\n};\n","import { INCREMENT, DECREMENT } from \"../actions/counter\";\n\nconst initialState = {\n  count: 0\n};\n\nexport const counter = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        count: state.count - action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { counter } from \"./counter\";\n\n// Using combine reducers to break up reducers into different files\nexport default combineReducers({\n  counter\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Keep this puppy here for later!\n\n// Set up Redux/Router\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\n// Import reducer/index.js as root reducer, it's where we're combining all our reducer files\nimport rootReducer from './store/reducers';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nconst LoadingIndicator = () => {\n\n    const { promiseInProgress } = usePromiseTracker();\n    return (\n        promiseInProgress &&\n        <div\n            style={{\n                width: \"100%\",\n                height: \"100vh\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                background: 'rgba(0, 0, 0, .2)',\n                zIndex: 10,\n            }}\n        >\n            <Loader type=\"Bars\" color={\"#343a40\"} height={80} width={100}/>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n            <LoadingIndicator/>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();\n"],"sourceRoot":""}